
#########################################################################
#         USER DEFINED PART!!!!!!
# Setup machine related variables (CLASS, ACCNR, & DISKNM)
#########################################################################

#   Uncomment any of the following skip options to skip those tests
#   ---------------------------------------------------------------
#SKIP_NMM=YES
#SKIP_GFS=YES
 SKIP_GENS=YES
 SKIP_NST=YES
 SKIP_FIM=YES
#SKIP_POST=YES
#SKIP_GFS_POST=YES
 SKIP_ESMF520rAPI=YES
 SKIP_ESMF630rAPI=NO
 SKIP_GEFS_CONCUR=YES
#SKIP_SINGLECORE=YES

COMPILE_SORC=YES                # recompile the basic test exec
COMPILE_SORC_520rAPI=YES        # recompile the 520rAPI exec
COMPILE_SORC_630rAPI=YES        # recompile the 630rAPI exec
COMPILE_SORC_NUOPC=YES          # recompile the NUOPC exec

CLEAN_SORC=YES                  # clean the source after successful run
CLEAN_RUNDIR=YES                # clean rundir after successful run

export BAIL_CONDITION=FILE      # NONE=run all tests even with failures
                                # TEST=stop testing if a test fails
                                # FILE=stop testing when a file compare fails

export dprefix1=""
export dprefix2=""
export MACHINE_ID=${MACHINE_ID:-wcoss}
if [ $MACHINE_ID = wcoss ]; then
  export CLASS=dev
  export ACCNR=dev
  export DISKNM=/meso
  export STMP=/stmpp1
  export PTMP=/ptmpp1
  export SCHEDULER=lsf
elif [ $MACHINE_ID = gaea ]; then 
  export CLASS=debug
  export ACCNR
  export DISKNM=/lustre/f1/Ratko.Vasic
  export STMP=/lustre/f1/ncep/$LOGNAME/ptmp
  export PTMP=/lustre/f1/ncep/$LOGNAME/ptmp
  export SCHEDULER=moab
  export SIGHDR=/lustre/f1/unswept/ncep/Shrinivas.Moorthi/para_branch/para_new/sorc/global_sighdr.fd/global_sighdr
elif [ $MACHINE_ID = zeus ]; then 
  export ACCNR
  export dprefix1=/scratch1/portfolios/NCEPDEV
  export dprefix2=/scratch2/portfolios/NCEPDEV
  export DISKNM=$dprefix2/meso
  export STMP=$dprefix2/stmp
  export PTMP=$dprefix2/ptmp
  export SCHEDULER=pbs
  export SIGHDR=$dprefix2/global/save/Shrinivas.Moorthi/para/sorc/global_sighdr.fd/global_sighdr
else
  echo "Unknown machine ID, please edit detect_machine.sh file"
  exit
fi
mkdir -p $STMP/$USER
mkdir -p $PTMP/$USER


############################################################
# RTPWD - Path to previously stored regression test answers
############################################################

    export RTPWD=${DISKNM}/noscrub/wx20rv/REGRESSION_TEST
#   export RTPWD=${STMP}/${USER}/REGRESSION_TEST


#########################################################################
# Check if running regression test or creating baselines.
# If one argument is provided and argument is = nmm, gfs, gen, or all,
# then this script will prepare new answers for regression tests
#########################################################################

  export CREATE_BASELINE=false
  CB_arg=null
  ST_test=false
  RT_FULL=false
  RT_NUOPC=false

argn=$#

if [ $argn -eq 0 ]; then
  ST_test=true
fi

if [ $argn -eq 1 ]; then
  export CREATE_BASELINE=true
  CB_arg=$1
  if [ $CB_arg != nmm -a $CB_arg != gfs -a $CB_arg != gen -a $CB_arg != fim -a  $CB_arg != post -a $CB_arg != all ]; then
    echo "Wrong CB_arg choice: " $CB_arg
    echo "  Options are: "
    echo "          RT.sh  nmm  (create baselines for NMM)"
    echo "          RT.sh  gfs  (create baselines for GFS)"
    echo "          RT.sh  gen  (create baselines for GEN)"
    echo "          RT.sh  fim  (create baselines for FIM)"
    echo "          RT.sh  post (create baselines for post)"
    echo "          RT.sh  all  (create baselines for NMM & GFS & FIM & post)"
    exit
  fi
  #
  # prepare new regression test directory
  #
   rm -rf ${STMP}/${USER}/REGRESSION_TEST
   echo "copy REGRESSION_TEST_baselines"
   mkdir -p ${STMP}/${USER}
   cp -r ${DISKNM}/noscrub/wx20rv/REGRESSION_TEST_baselines \
	 ${STMP}/${USER}
   mv ${STMP}/${USER}/REGRESSION_TEST_baselines ${STMP}/${USER}/REGRESSION_TEST
  CP_nmm=false
  CP_gfs=false
  CP_fim=false
  CP_post=false
  if   [ $CB_arg = nmm ]; then
    CP_gfs=true
    CP_fim=true
    CP_post=true
  elif [ $CB_arg = gfs ]; then
    CP_nmm=true
    CP_fim=true
    CP_post=true
  elif [ $CB_arg = fim ]; then
    CP_nmm=true
    CP_gfs=true
    CP_post=true
  elif [ $CB_arg = post ]; then
    CP_nmm=true
    CP_gfs=true
    CP_fim=true
  fi
  RTPWD_U=${STMP}/${USER}/REGRESSION_TEST
  if [ $CP_gfs = true ]; then
    echo "copy gfs"
#    cp ${RTPWD}/GEFS_m4/*                  ${RTPWD_U}/GEFS_m4/.
#    cp ${RTPWD}/GEFS_m4_5.2.0rp1/*         ${RTPWD_U}/GEFS_m4_5.2.0rp1/.
#    cp ${RTPWD}/GEFS_m4_6.1.1/*            ${RTPWD_U}/GEFS_m4_6.1.1/.
    cp ${RTPWD}/GFS_ADIAB/*                ${RTPWD_U}/GFS_ADIAB/.
    cp ${RTPWD}/GFS_DFI_REDUCEDGRID/*      ${RTPWD_U}/GFS_DFI_REDUCEDGRID/.
#   cp ${RTPWD}/GFS_DFI_REDUCEDGRID_HYB/*  ${RTPWD_U}/GFS_DFI_REDUCEDGRID_HYB/.
    cp ${RTPWD}/GFS_DFI_hyb_2loop/*        ${RTPWD_U}/GFS_DFI_hyb_2loop/.
#   cp ${RTPWD}/GFS_DFI_hyb_2loop_nst/*    ${RTPWD_U}/GFS_DFI_hyb_2loop_nst/.
    cp ${RTPWD}/GFS_NODFI/*                ${RTPWD_U}/GFS_NODFI/.
#   cp ${RTPWD}/GFS_NODFI_5.2.0rp1/*       ${RTPWD_U}/GFS_NODFI_5.2.0rp1/.
#   cp ${RTPWD}/GFS_NODFI_6.1.1/*          ${RTPWD_U}/GFS_NODFI_6.1.1/.
#   cp ${RTPWD}/GFS_OPAC/*                 ${RTPWD_U}/GFS_OPAC/.
    cp ${RTPWD}/WAM_gh_l150/*              ${RTPWD_U}/WAM_gh_l150/.
    cp ${RTPWD}/WAM_gh_l150_NDSL/*         ${RTPWD_U}/WAM_gh_l150_NDSL/.
    cp ${RTPWD}/GFS_DFI_NEMSIO/*           ${RTPWD_U}/GFS_DFI_NEMSIO/.
    cp ${RTPWD}/GFS_GOCART_NEMSIO/*        ${RTPWD_U}/GFS_GOCART_NEMSIO/.
    cp ${RTPWD}/GFS_SLG_adiab/*            ${RTPWD_U}/GFS_SLG_adiab/.
    cp ${RTPWD}/GFS_SLG_adiab_DFI/*        ${RTPWD_U}/GFS_SLG_adiab_DFI/.
    cp ${RTPWD}/GFS_NODFI_ESMF_6.3.0rAPI/* ${RTPWD_U}/GFS_NODFI_ESMF_6.3.0rAPI/.
  fi
  if [ $CP_nmm = true ]; then
    echo "copy nmm"
    cp ${RTPWD}/NMMB_2way_nests/*          ${RTPWD_U}/NMMB_2way_nests/.
    cp ${RTPWD}/NMMB_gfsP_glob/*           ${RTPWD_U}/NMMB_gfsP_glob/.
    cp ${RTPWD}/NMMB_gfsP_reg/*            ${RTPWD_U}/NMMB_gfsP_reg/.
    cp ${RTPWD}/NMMB_glob/*                ${RTPWD_U}/NMMB_glob/.
    cp ${RTPWD}/NMMB_mvg_nests/*           ${RTPWD_U}/NMMB_mvg_nests/.
    cp ${RTPWD}/NMMB_nests/*               ${RTPWD_U}/NMMB_nests/.
    cp ${RTPWD}/NMMB_reg/*                 ${RTPWD_U}/NMMB_reg/.
    cp ${RTPWD}/NMMB_reg_filt/*            ${RTPWD_U}/NMMB_reg_filt/.
    cp ${RTPWD}/NMMB_reg_pcpadj/*          ${RTPWD_U}/NMMB_reg_pcpadj/.
    cp ${RTPWD}/NMMB_reg_spec_adv/*        ${RTPWD_U}/NMMB_reg_spec_adv/.
    cp ${RTPWD}/NMMB_reg_sas_zhao/*        ${RTPWD_U}/NMMB_reg_sas_zhao/.
    cp ${RTPWD}/NMMB_reg_sel_phy/*         ${RTPWD_U}/NMMB_reg_sel_phy/.
    cp ${RTPWD}/NMMB_reg_thomp/*           ${RTPWD_U}/NMMB_reg_thomp/.
    cp ${RTPWD}/NMMB_reg_timesr/*          ${RTPWD_U}/NMMB_reg_timesr/.
    cp ${RTPWD}/NMMB_reg_wsm6_gfdl/*       ${RTPWD_U}/NMMB_reg_wsm6_gfdl/.
    cp ${RTPWD}/NMMB_reg_wsm6_rrtm/*       ${RTPWD_U}/NMMB_reg_wsm6_rrtm/.
  fi
  if [ $CP_fim = true ]; then
    echo "copy fim"
    #cp ${RTPWD}/FIMdata/*                  ${RTPWD_U}/FIMdata/.
    #TODO:  generalize with $GLVL (see below)
    #cp ${RTPWD}/FIM_G4L38_24hr/*           ${RTPWD_U}/FIM_G4L38_24hr/.
  fi
  if [ $CP_post = true ]; then
    echo "copy post"
    cp    ${RTPWD}/GFS_DFI_POST/*          ${RTPWD_U}/GFS_DFI_POST/.
    cp    ${RTPWD}/NMMB_reg_post/*         ${RTPWD_U}/NMMB_reg_post/.
    cp -r ${RTPWD}/GFS_GOCART_POST/*       ${RTPWD_U}/GFS_GOCART_POST/.
  fi
fi

#########################################################################
# Look at command line arguments to determine testing mode:
# If two arguments are provided ("full test") this will run complete set
# of regression tests, otherwise it will run only mandatory (standard) test.
# If two arguments are provided ("nuopc test") then run NUOPC test suite.
#########################################################################

if [ $argn -eq 2 ]; then
  RT_arg1=$1
  RT_arg2=$2
  if [ $RT_arg1 = full -a $RT_arg2 = test ]; then
    RT_FULL=true
  elif [ $RT_arg1 = nuopc -a $RT_arg2 = test ]; then
    RT_NUOPC=true
  else
    echo "Wrong RT_arg choice: " $RT_arg1 $RT_arg2
    echo "  Options are: "
    echo "          RT.sh  full test   (run complete regression test)"
    echo "          RT.sh  nuopc test  (run NUOPC test suite)"
    exit
  fi
elif [ $argn -gt 2 ]; then
  echo "Too many arguments specified!"
  exit
fi

################################################
# List of variables in use:
################################################
#
# RT_FULL     - true: full test; false: standard test
# ST_test     - true: standard test; false: full test
# TEST_NR     - test number
# TEST_DESCR  - test description
# RTPWD       - path with previous stored data
# PATHRT      - regression test script path
# PATHTR      - NEMS path
# RUNDIR_ROOT - temporary run directory
# RUNDIR      - current test run directory
# CNTL_DIR    - control directory name for current test
# LIST_FILES  - list of files for comparison
# TPN         - number of tasks per node
# NODE        - number of nodes
# TASKS       - total number of tasks
# PE1         - number of computing tasks
# WRTGP       - number of write groups
# WTPG        - number of write tasks per group
# THRD        - number of threads
# WLCLK       - wall clock limit
# TS          - true: write time series
# INPES       - number od PE's on x direction
# JNPES       - number od PE's on y direction
# FCSTL       - forecast length in hours
# NDAYS       - forecast length in days
# NEMSI       - NEMSIO as input file
# RSTRT       - restarted run
# gfsP        - GFS physics suite
# PCPFLG      - precipitation adjustment (true/false)
# WPREC       - write output for precipitation adjustment (true/false)
# NCHILD      - number of direct nested domains
# RADTN       - radiation scheme (gfdl, rrtm)
# CONVC       - convective scheme (bmj, sas)
# MICRO       - microphysics scheme (fer, gfs, fer_hires)
# SPEC_ADV    - separate species advection (true/false)
# TURBL       - PBL scheme (myj,gfs)
# GBRG        - NMMB global/regional/nest/filter option
# QUILT       - quilting ON/OFF
# NSOUT       - number of timesteps for output
# MODE        - nesting mode (1-way or 2-way)
# WGT         - 2-way exchange weight of child data to parent
# CLASS       - job class
# GROUP       - job group
# ACCNR       - account number
# MACHINE_ID  - =wcoss (tide/gyre), =gaea, =zeus
# DISKNM      - disk name ( /meso or /mtb)
# CREATE_BASELINE - true/false
# CB_arg      - baseline arguments:
#                 =nmm - create nmm baselines only
#                 =gfs - create gfs baselines only
#                 =fim - create fim baselines only
#                 =all - create all baselines
# CP2         - 2-copy option
# FDFI	      - half of digital filter window in hours (e.g. 3)
# ADIAB       - logical, .true. if the run is adiabatic (i.e. no physics)
# REDUCEDGRID - turn off/on to run on reduced grid
# IAER        - 3-digit aerosol flag (for volc, lw, sw)
#		  =0: turn all aeros effects off (sw, lw, volc)
#		  =1: use clim tropospheric aerosol for sw only
#		  =10: use clim tropospheric aerosol for lw only
#		  =11: use clim tropospheric aerosol for both sw/lw
#		  =100: volc aerosol only for both sw/lw
#		  =101: volc and clim trops aerosol for sw only
#		  =110: volc and clim trops aerosol for lw only
#		  =111: volc and clim trops aerosol for both sw/lw
# FHRES       - restart interval in hours
# wave        - spectral truncation of the model wave (i.e. JCAP  like T878)
#               remove JCAPG (March 2013) grid is controlled by LONF and LATG
# lm          - number of model levels
# lsoil       - number of soil levels in the land model
# IDVC        - integer describing the vertical coord - 2 means hybrid, 3 means
#		generalized hybrid
# THERMODYN_ID- integer identifying the thermodynamic variable - virtual T
#		or enthalpy
# SFCPRESS_ID - integer identifying whether lnps or ps is the variable used
# SPECTRALLOOP- option for one loop or two loop
# NST_FCST    - integer determining whether NST model is run in forecast mode 
#		or not (values 0,1 or 2)
# NDSLFV      - option be true or false for non-iteration dimensional-split
#               semi-Lagrangian advection
# MEMBER_NAMES  - ensemble member names (c00 if only one member)
# GEFS_ENSEMBLE - GEFS ensemble (=1 true, =0 false)
# GEN_ENSEMBLE  - GEN ensemble (=1 true, =0 false)
# STMP/PTMP     - temporary directory names 
# SCHEDULER     - machine scheduler name
# AFFN          - task affinity (core or cpu)
#
################################################

###################################
# PATHRT - Path to regression test
###################################

export PATHRT=`pwd`            # Path to regression test scripts
cd ../../
export PATHTR=`pwd`            # Path to NEMS trunk

export REGRESSIONTEST_LOG=${PATHRT}/RegressionTests_$MACHINE_ID.log
export COMPILE_LOG=${PATHRT}/Compile_$MACHINE_ID.log

date > ${COMPILE_LOG}
date > ${REGRESSIONTEST_LOG}
echo "Start Regression test" >> ${REGRESSIONTEST_LOG}
(echo;echo;echo)             >> ${REGRESSIONTEST_LOG}

export RUNDIR_ROOT=${PTMP}/${USER}/RT_$$
mkdir -p ${RUNDIR_ROOT}
typeset -Z3 TEST_NR
export TEST_NR=0

echo ${RUNDIR_ROOT}

clear;echo;echo

###############################################################################
#
# Export variables to the default values
#  - first common variables, then model specific ones
#  - different machines, different defaults:
#
###############################################################################

if [ $MACHINE_ID = wcoss ]; then

  TASKS_dflt=32  ; TPN_dflt=16 ; INPES_dflt=05 ; JNPES_dflt=06 ; WTPG_dflt=2
  TASKS_thrd=16  ; TPN_thrd=08 ; INPES_thrd=03 ; JNPES_thrd=05 ; WTPG_thrd=1
  TASKS_nest=96  ; TPN_nest=16 ; INPES_nest=02 ; JNPES_nest=02 ; WTPG_nest=1
  TASKS_fltr=64  ; TPN_fltr=16 ; INPES_fltr=02 ; JNPES_fltr=02 ; WTPG_fltr=1
  TASKS_mvg1=96  ; TPN_mvg1=16 ; INPES_mvg1=05 ; JNPES_mvg1=07 ; WTPG_mvg1=1
  TASKS_mvg2=96  ; TPN_mvg2=16 ; INPES_mvg2=05 ; JNPES_mvg2=18 ; WTPG_mvg2=2

elif [ $MACHINE_ID = gaea -o $MACHINE_ID = zeus ]; then

  TASKS_dflt=48  ; TPN_dflt=   ; INPES_dflt=05 ; JNPES_dflt=09 ; WTPG_dflt=3
  TASKS_thrd=48  ; TPN_thrd=   ; INPES_thrd=05 ; JNPES_thrd=09 ; WTPG_thrd=3
  TASKS_nest=96  ; TPN_nest=   ; INPES_nest=02 ; JNPES_nest=02 ; WTPG_nest=1
  TASKS_fltr=64  ; TPN_fltr=   ; INPES_fltr=02 ; JNPES_fltr=02 ; WTPG_fltr=1
  TASKS_mvg1=96  ; TPN_mvg1=   ; INPES_mvg1=05 ; JNPES_mvg1=07 ; WTPG_mvg1=1
  TASKS_mvg2=96  ; TPN_mvg2=   ; INPES_mvg2=05 ; JNPES_mvg2=18 ; WTPG_mvg2=2

fi

export_common ()
{
export THRD=1
export WTPG=$WTPG_dflt
export WLCLK=10
export GEFS_ENSEMBLE=0
export GEN_ENSEMBLE=0
export WRITE_DOPOST=.false.
export POST_GRIBVERSION='"grib1"'
check_executable
}

export_nmm ()
{
export_common
export INPES=$INPES_dflt ; export JNPES=$JNPES_dflt ; export WTPG=$WTPG_dflt
export TASKS=$TASKS_dflt ; export TPN=$TPN_dflt
export GBRG=reg          ; export NEMSI=false       ; export RSTRT=false
export AFFN=core         ; export NODE=1
export NCHILD=0          ; export MODE=1-way        ; export WGT=0.0
export FCSTL=48
export PCPFLG=false      ; export WPREC=false
export TS=false
export RADTN=rrtm        ; export CONVC=bmj         ; export TURBL=myj
export MICRO=fer_hires   ; export gfsP=false        ; export SPEC_ADV=false
}

export_gsm ()
{
export_common
export TASKS=32  ; export PE1=32       ; export NSOUT=0       ; export QUILT=.false.
#export TASKS=8  ; export PE1=8        ; export NSOUT=0       ; export QUILT=.false.
export NDAYS=2   ; export CP2=.false.  ; export IAER=0        ; export FHRES=180
export WRTGP=1   ; export FDFI=0       ; export ADIAB=.false. ; export REDUCEDGRID=.true.
#export wave=62  ; export THRD=4
export wave=62   ; export THRD=1
export lm=64     ; export lsoil=4         ; export MEMBER_NAMES=c00
export IDVC=2    ; export THERMODYN_ID=1  ; export SFCPRESS_ID=1 ; export SPECTRALLOOP=2
export NEMSIOIN=.false.  ; export NEMSIOOUT=.false. ; export rungfstest=.true.
export SIGIOIN=.true.    ; export SIGIOOUT=.true.   ; export SFCIOOUT=.true.
export FHSWR=3600        ;  export FHLWR=3600       ; LDFI_SPECT=.true.
export CDATE=2012010100
#export CDATE=2010010100
export GOCART_AER2POST=.false.
#export GOCART_AER2POST=.false.
export NST_FCST=0  ; export NDSLFV=.false.  ; export IDEA=.false.
}

export_fim ()
{
export_common
export FIM_USE_NEMS=true
}

export_nems ()
{
export atm_model=none
export atm_petlist_bounds="-1 -1"
export ocn_model=none
export ocn_petlist_bounds="-1 -1"
export ice_model=none
export ice_petlist_bounds="-1 -1"
export med_model=nems
export med_petlist_bounds="-1 -1"
export med_atm_coupling_interval_sec=-1
export med_ocn_coupling_interval_sec=-1
}

check_executable ()
{
if [ -f ${PATHTR}/exe/NEMS.x ] ; then
 echo "   Model code Compiled";echo;echo
else
 echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
 echo "   Model code is NOT compiled"
 exit
fi
}

 export SLG=.false.

############################################################################
# Testing of NEMS with NUOPC
############################################################################

if [ $RT_NUOPC = true ] ; then
  echo "Running the NEMS with NUOPC test suite"
  if [ $MACHINE_ID = zeus ]; then
    export IC_DIR=/scratch1/portfolios/NCEPDEV/nems/noscrub/Gerhard.Theurich/GSM_INITIAL_CONDITIONS
    export RTPWD=/scratch1/portfolios/NCEPDEV/nems/noscrub/Gerhard.Theurich/REGRESSION_TEST_NUOPC_v0003
  elif [ $MACHINE_ID = gaea ]; then
    export IC_DIR=/lustre/f1/unswept/ncep/Gerhard.Theurich/GSM_INITIAL_CONDITIONS
    export RTPWD=/lustre/f1/unswept/Fei.Liu/REGRESSION_TEST_NUOPC_v0003
  fi
  
  if [ ${COMPILE_SORC_NUOPC:-YES} = YES ] ; then
  
    echo "Building the NEMS executable with NUOPC"
  
    printf %s "Compiling model code (this will take some time)......."
    cd ${PATHTR}/src

    date                                     >> ${REGRESSIONTEST_LOG}
    echo "Compilation ESMF with NUOPC Layer" >> ${REGRESSIONTEST_LOG}
    
    if [ -f ${PATHTR}/exe/NEMS.x ] ; then
      mv ${PATHTR}/exe/NEMS.x ${PATHTR}/exe/NEMS.x.old
    fi
    
    if [ $MACHINE_ID = wcoss ]; then

      echo "NEMS with NUOPC not yet available on this machine"
      exit

    elif [ $MACHINE_ID = gaea ]; then

      ./esmf_version nuopc_gaea              >> ${COMPILE_LOG} 2>&1
      source ./conf/modules.nems.Gaea        >> ${COMPILE_LOG} 2>&1
      module list                            >> ${COMPILE_LOG} 2>&1
      gmake clean                            >> ${COMPILE_LOG} 2>&1
      #gmake nmm_gsm OCN=mom5,hycom,dummy ICE=dummy,cice >> ${COMPILE_LOG} 2>&1
      gmake nmm_gsm OCN=mom5 >> ${COMPILE_LOG} 2>&1

    elif [ $MACHINE_ID = zeus ]; then

      ./esmf_version nuopc_zeus              >> ${COMPILE_LOG} 2>&1
      source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
      module list                            >> ${COMPILE_LOG} 2>&1
      gmake clean                            >> ${COMPILE_LOG} 2>&1
      gmake nmm_gsm OCN=mom5,hycom,dummy ICE=dummy,cice >> ${COMPILE_LOG} 2>&1

    fi
    date                                     >> ${REGRESSIONTEST_LOG}

    if [ -f ${PATHTR}/exe/NEMS.x ] ; then
      echo "   done";echo;echo
    else
      echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
      echo "   failed";echo;echo
      exit
    fi

  fi # endif compilation

  cd $PATHRT
  
  ###############################################################################
  #
  # TEST   - Global NMM-B with pure binary input under NUOPC
  #        - 6x5 compute  tasks / 1 thread / opnl physics / free fcst / pure binary input
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: NMM-B pure binary input"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/NMM_CNTRL_NUOPC
    export CNTL_DIR=NMMB_glob
    export LIST_FILES=" \
    nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0003h_00m_00.00s nmmb_hst_01_bin_0006h_00m_00.00s \
    nmmb_hst_01_bin_0009h_00m_00.00s nmmb_hst_01_bin_0012h_00m_00.00s nmmb_hst_01_bin_0015h_00m_00.00s \
    nmmb_hst_01_bin_0018h_00m_00.00s nmmb_hst_01_bin_0021h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
    nmmb_hst_01_bin_0027h_00m_00.00s nmmb_hst_01_bin_0030h_00m_00.00s nmmb_hst_01_bin_0033h_00m_00.00s \
    nmmb_hst_01_bin_0036h_00m_00.00s nmmb_hst_01_bin_0039h_00m_00.00s nmmb_hst_01_bin_0042h_00m_00.00s \
    nmmb_hst_01_bin_0045h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
    nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0003h_00m_00.00s nmmb_hst_01_nio_0006h_00m_00.00s \
    nmmb_hst_01_nio_0009h_00m_00.00s nmmb_hst_01_nio_0012h_00m_00.00s nmmb_hst_01_nio_0015h_00m_00.00s \
    nmmb_hst_01_nio_0018h_00m_00.00s nmmb_hst_01_nio_0021h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
    nmmb_hst_01_nio_0027h_00m_00.00s nmmb_hst_01_nio_0030h_00m_00.00s nmmb_hst_01_nio_0033h_00m_00.00s \
    nmmb_hst_01_nio_0036h_00m_00.00s nmmb_hst_01_nio_0039h_00m_00.00s nmmb_hst_01_nio_0042h_00m_00.00s \
    nmmb_hst_01_nio_0045h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
    nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
    #---------------------
    export_nmm
    export TASKS=48
    export WLCLK=30
    export GBRG=glob
    # - nems.configure ---
    export_nems
    export atm_model=nmm
    export atm_petlist_bounds="0 47"
    export med_model=none
    #---------------------
    ./rt_nmm.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine

  ###############################################################################
  # 
  # TEST   - GSM with stepable Run() method
  #        - Calling GSM Run() from EARTH component in 12 hour intervals
  #        - 30 compute tasks / 1 thread 
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaea ] ; then

    export TEST_DESCR="NUOPC: GSM with stepable Run() driven in 12h intervals"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_32_NUOPC
    export CNTL_DIR=GFS_NODFI
    export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf18 sigf24 sigf30 sigf36 sigf42 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf18 sfcf24 sfcf30 sfcf36 sfcf42 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf18 flxf24 flxf30 flxf36 flxf42 flxf48"
    #---------------------
    export_gsm
    export WLCLK=30
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export med_model=none
    export med_atm_coupling_interval_sec=43200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  ###############################################################################
  #
  # TEST   - GSM + HYCOM side-by-side
  #        - 6h intervals for both GSM and HYCOM
  #        - GSM and HYCOM running from data files
  #        - Simulation period for HYCOM is set by GSM parameters
  #        - Starting at 2009120100, running for 2 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM + HYCOM side-by-side from data with 6h intervals"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_HYCOM_SIDEbySIDE
    export CNTL_DIR=GSM_HYCOM_2DAY_2009120100
    export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf18 sigf24 sigf30 sigf36 sigf42 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf18 sfcf24 sfcf30 sfcf36 sfcf42 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf18 flxf24 flxf30 flxf36 flxf42 flxf48 \
        ovrtn_out restart_out.a restart_out.b summary_out"
    #---------------------
    export_gsm
    export TASKS=178
    export WLCLK=30
    export CDATE=2009120100
    export NDAYS=2
    export wave=126 ; export lm=64 ; export lsoil=4
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=hycom
    export ocn_petlist_bounds="32 177"
    export med_model=none
    export med_ocn_coupling_interval_sec=21600.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine

  ###############################################################################
  #
  # TEST   - GSM + MOM5 side-by-side
  #        - 2h coupling interval
  #        - Starting at 2009120100, running for 2 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeusOFF -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM + MOM5 side-by-side from data with 2h intervals"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_MOM5_SIDEbySIDE
    export CNTL_DIR=GFS_NODFI_2009120100
    export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf18 sigf24 sigf30 sigf36 sigf42 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf18 sfcf24 sfcf30 sfcf36 sfcf42 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf18 flxf24 flxf30 flxf36 flxf42 flxf48"
    #---------------------
    export_gsm
    export TASKS=56
    export WLCLK=30
    export CDATE=2009120100
    export NDAYS=2
    export wave=126 ; export lm=64 ; export lsoil=4
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=mom5
    export ocn_petlist_bounds="32 55"
    export med_model=none
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine

  ###############################################################################
  # 
  # TEST   - GSM <-> Mediator <-> DummyOCN
  #        -      3h           6h    coupling interval
  #        - Exchanging dummy Fields
  #        - Starting at 2009120100, running for 2 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM <-3h-> Mediator <-6h-> DummyOCN ... 2 days"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_MED_DummyOCN
    export CNTL_DIR=GSM_MED_DummyOCN_2DAY_2009120100
    export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf18 sigf24 sigf30 sigf36 sigf42 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf18 sfcf24 sfcf30 sfcf36 sfcf42 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf18 flxf24 flxf30 flxf36 flxf42 flxf48 \
        weights_ATM-TO-MED_inst_down_lw_flx.nc \
        weights_ATM-TO-MED_inst_down_sw_flx.nc \
        weights_ATM-TO-MED_inst_down_sw_ir_dif_flx.nc \
        weights_ATM-TO-MED_inst_down_sw_ir_dir_flx.nc \
	weights_ATM-TO-MED_inst_down_sw_vis_dif_flx.nc \
	weights_ATM-TO-MED_inst_down_sw_vis_dir_flx.nc \
	weights_ATM-TO-MED_inst_ir_dif_albedo.nc \
        weights_ATM-TO-MED_inst_ir_dir_albedo.nc \
        weights_ATM-TO-MED_inst_laten_heat_flx.nc \
        weights_ATM-TO-MED_inst_merid_moment_flx.nc \
        weights_ATM-TO-MED_inst_net_lw_flx.nc \
	weights_ATM-TO-MED_inst_net_sw_flx.nc \
	weights_ATM-TO-MED_inst_net_sw_ir_dif_flx.nc \
	weights_ATM-TO-MED_inst_net_sw_ir_dir_flx.nc \
        weights_ATM-TO-MED_inst_net_sw_vis_dif_flx.nc \
        weights_ATM-TO-MED_inst_net_sw_vis_dir_flx.nc \
        weights_ATM-TO-MED_inst_pres_height_surface.nc \
        weights_ATM-TO-MED_inst_sensi_heat_flx.nc \
	weights_ATM-TO-MED_inst_spec_humid_height2m.nc \
	weights_ATM-TO-MED_inst_surface_height.nc \
	weights_ATM-TO-MED_inst_temp_height2m.nc \
        weights_ATM-TO-MED_inst_temp_height_surface.nc \
        weights_ATM-TO-MED_inst_u_wind_height10m.nc \
        weights_ATM-TO-MED_inst_vis_dif_albedo.nc \
        weights_ATM-TO-MED_inst_vis_dir_albedo.nc \
	weights_ATM-TO-MED_inst_v_wind_height10m.nc \
	weights_ATM-TO-MED_inst_zonal_moment_flx.nc \
	weights_ATM-TO-MED_mean_down_lw_flx.nc \
        weights_ATM-TO-MED_mean_down_sw_flx.nc \
        weights_ATM-TO-MED_mean_down_sw_ir_dif_flx.nc \
        weights_ATM-TO-MED_mean_down_sw_ir_dir_flx.nc \
        weights_ATM-TO-MED_mean_down_sw_vis_dif_flx.nc \
	weights_ATM-TO-MED_mean_down_sw_vis_dir_flx.nc \
	weights_ATM-TO-MED_mean_laten_heat_flx.nc \
	weights_ATM-TO-MED_mean_merid_moment_flx.nc \
        weights_ATM-TO-MED_mean_net_lw_flx.nc \
        weights_ATM-TO-MED_mean_net_sw_flx.nc \
        weights_ATM-TO-MED_mean_net_sw_ir_dif_flx.nc \
        weights_ATM-TO-MED_mean_net_sw_ir_dir_flx.nc \
	weights_ATM-TO-MED_mean_net_sw_vis_dif_flx.nc \
	weights_ATM-TO-MED_mean_net_sw_vis_dir_flx.nc \
	weights_ATM-TO-MED_mean_prec_rate.nc \
        weights_ATM-TO-MED_mean_sensi_heat_flx.nc \
        weights_ATM-TO-MED_mean_zonal_moment_flx.nc \
        weights_MED-TO-ATM_sea_surface_temperature.nc \
        weights_MED-TO-OCN_inst_pres_height_surface.nc \
	weights_MED-TO-OCN_mean_down_lw_flx.nc \
	weights_MED-TO-OCN_mean_laten_heat_flx.nc \
	weights_MED-TO-OCN_mean_merid_moment_flx.nc \
        weights_MED-TO-OCN_mean_prec_rate.nc \
        weights_MED-TO-OCN_mean_sensi_heat_flx.nc \
        weights_MED-TO-OCN_mean_zonal_moment_flx.nc \
        weights_OCN-TO-MED_sea_surface_temperature.nc \
        field_atm_export_idlwfx.nc \
        field_atm_export_idswfx.nc \
        field_atm_export_iirdifa.nc \
        field_atm_export_iirdira.nc \
        field_atm_export_ilhfx.nc \
        field_atm_export_immfx.nc \
        field_atm_export_inlwfx.nc \
        field_atm_export_inst_net_sw_flux_nir_dif.nc \
        field_atm_export_inst_net_sw_flux_nir_dir.nc \
        field_atm_export_inst_net_sw_flux_vis_dif.nc \
        field_atm_export_inst_net_sw_flux_vis_dir.nc \
        field_atm_export_inst_sw_flux_nir_dif.nc \
        field_atm_export_inst_sw_flux_nir_dir.nc \
        field_atm_export_inst_sw_flux_vis_dif.nc \
        field_atm_export_inst_sw_flux_vis_dir.nc \
        field_atm_export_inswfx.nc \
        field_atm_export_ips.nc \
        field_atm_export_ishfx.nc \
        field_atm_export_ishh2m.nc \
        field_atm_export_ish.nc \
        field_atm_export_ith2m.nc \
        field_atm_export_its.nc \
        field_atm_export_iuwh10m.nc \
        field_atm_export_ivisdifa.nc \
        field_atm_export_ivisdira.nc \
        field_atm_export_ivwh10m.nc \
        field_atm_export_izmfx.nc \
        field_atm_export_lprec.nc \
        field_atm_export_mdlwfx.nc \
        field_atm_export_mdswfx.nc \
        field_atm_export_mlhfx.nc \
        field_atm_export_mmmfx.nc \
        field_atm_export_mnlwfx.nc \
        field_atm_export_mnswfx.nc \
        field_atm_export_mshfx.nc \
        field_atm_export_mzmfx.nc \
        field_atm_export_sw_flux_nir_dif.nc \
        field_atm_export_sw_flux_nir_dir.nc \
        field_atm_export_sw_flux_vis_dif.nc \
        field_atm_export_sw_flux_vis_dir.nc \
        field_atm_export_sw_net_flux_nir_dif.nc \
        field_atm_export_sw_net_flux_nir_dir.nc \
        field_atm_export_sw_net_flux_vis_dif.nc \
        field_atm_export_sw_net_flux_vis_dir.nc \
        field_atm_import_sst.nc \
        field_med_from_atm_idlwfx.nc \
        field_med_from_atm_idswfx.nc \
        field_med_from_atm_iirdifa.nc \
        field_med_from_atm_iirdira.nc \
        field_med_from_atm_ilhfx.nc \
        field_med_from_atm_immfx.nc \
        field_med_from_atm_inlwfx.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dir.nc \
        field_med_from_atm_inst_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_sw_flux_vis_dir.nc \
        field_med_from_atm_inswfx.nc \
        field_med_from_atm_ips.nc \
        field_med_from_atm_ishfx.nc \
        field_med_from_atm_ishh2m.nc \
        field_med_from_atm_ish.nc \
        field_med_from_atm_ith2m.nc \
        field_med_from_atm_its.nc \
        field_med_from_atm_iuwh10m.nc \
        field_med_from_atm_ivisdifa.nc \
        field_med_from_atm_ivisdira.nc \
        field_med_from_atm_ivwh10m.nc \
        field_med_from_atm_izmfx.nc \
        field_med_from_atm_lprec.nc \
        field_med_from_atm_mdlwfx.nc \
        field_med_from_atm_mdswfx.nc \
        field_med_from_atm_mlhfx.nc \
        field_med_from_atm_mmmfx.nc \
        field_med_from_atm_mnlwfx.nc \
        field_med_from_atm_mnswfx.nc \
        field_med_from_atm_mshfx.nc \
        field_med_from_atm_mzmfx.nc \
        field_med_from_atm_sw_flux_nir_dif.nc \
        field_med_from_atm_sw_flux_nir_dir.nc \
        field_med_from_atm_sw_flux_vis_dif.nc \
        field_med_from_atm_sw_flux_vis_dir.nc \
        field_med_from_atm_sw_net_flux_nir_dif.nc \
        field_med_from_atm_sw_net_flux_nir_dir.nc \
        field_med_from_atm_sw_net_flux_vis_dif.nc \
        field_med_from_atm_sw_net_flux_vis_dir.nc \
        field_med_from_ocn_sst.nc \
        field_med_to_atm_sst.nc \
        field_med_to_ocn_ips.nc \
        field_med_to_ocn_lprec.nc \
        field_med_to_ocn_mdlwfx.nc \
        field_med_to_ocn_mlhfx.nc \
        field_med_to_ocn_mmmfx.nc \
        field_med_to_ocn_mshfx.nc \
        field_med_to_ocn_mzmfx.nc \
        field_ocn_export_sst.nc \
        field_ocn_import_ips.nc \
        field_ocn_import_lprec.nc \
        field_ocn_import_mdlwfx.nc \
        field_ocn_import_mlhfx.nc \
        field_ocn_import_mmmfx.nc \
        field_ocn_import_mshfx.nc \
        field_ocn_import_mzmfx.nc "
    #---------------------
    export_gsm
    export TASKS=64
    export WLCLK=60
    export CDATE=2009120100
    export NDAYS=2
    export wave=126 ; export lm=64 ; export lsoil=4
    export CPLFLX=.true.
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=dummy
    export ocn_petlist_bounds="32 49"
    export med_petlist_bounds="50 63"
    export med_atm_coupling_interval_sec=10800.0
    export med_ocn_coupling_interval_sec=21600.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine

  ###############################################################################
  #
  # TEST   - GSM <-> Mediator <-> MOM5
  #        -      1h           2h    coupling interval
  #        - Exchanging Fields
  #        - Starting at 2009120100, running for 1 day
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM <-1h-> Mediator <-2h-> MOM5 ... 1 day"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_MED_MOM5_1day
    export CNTL_DIR=GFS_NODFI_2009120100_1h_2Way20140424_1day
    export LIST_FILES=" \
	sigf00 sigf01 sigf02 sigf04 sigf06 sigf12 sigf24 \
	sfcf00 sfcf01 sfcf02 sfcf04 sfcf06 sfcf12 sfcf24 \
	flxf00 flxf01 flxf02 flxf04 flxf06 flxf12 flxf24 \
        weights_ATM-TO-MED_inst_down_lw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_ir_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_ir_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_laten_heat_flx.nc  \
        weights_ATM-TO-MED_inst_merid_moment_flx.nc  \
        weights_ATM-TO-MED_inst_net_lw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_pres_height_surface.nc  \
        weights_ATM-TO-MED_inst_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_inst_spec_humid_height2m.nc  \
        weights_ATM-TO-MED_inst_surface_height.nc  \
        weights_ATM-TO-MED_inst_temp_height2m.nc  \
        weights_ATM-TO-MED_inst_temp_height_surface.nc  \
        weights_ATM-TO-MED_inst_u_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_vis_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_vis_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_v_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_zonal_moment_flx.nc  \
        weights_ATM-TO-MED_mean_down_lw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_laten_heat_flx.nc  \
        weights_ATM-TO-MED_mean_merid_moment_flx.nc  \
        weights_ATM-TO-MED_mean_net_lw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_prec_rate.nc  \
        weights_ATM-TO-MED_mean_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_mean_zonal_moment_flx.nc  \
        weights_MED-TO-ATM_sea_surface_temperature.nc  \
        weights_MED-TO-OCN_inst_pres_height_surface.nc  \
        weights_MED-TO-OCN_mean_evap_rate.nc  \
        weights_MED-TO-OCN_mean_merid_moment_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dir_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dir_flx.nc  \
        weights_MED-TO-OCN_mean_prec_rate.nc  \
        weights_MED-TO-OCN_mean_sensi_heat_flx.nc  \
        weights_MED-TO-OCN_mean_zonal_moment_flx.nc  \
        weights_OCN-TO-MED_sea_lev.nc  \
        weights_OCN-TO-MED_sea_surface_temperature.nc  \
        weights_OCN-TO-MED_s_surf.nc  \
        weights_OCN-TO-MED_u_surf.nc  \
        weights_OCN-TO-MED_v_surf.nc  \
        field_atm_export_idlwfx.nc \
        field_atm_export_idswfx.nc \
        field_atm_export_iirdifa.nc \
        field_atm_export_iirdira.nc \
        field_atm_export_ilhfx.nc \
        field_atm_export_immfx.nc \
        field_atm_export_inlwfx.nc \
        field_atm_export_inst_net_sw_flux_nir_dif.nc \
        field_atm_export_inst_net_sw_flux_nir_dir.nc \
        field_atm_export_inst_net_sw_flux_vis_dif.nc \
        field_atm_export_inst_net_sw_flux_vis_dir.nc \
        field_atm_export_inst_sw_flux_nir_dif.nc \
        field_atm_export_inst_sw_flux_nir_dir.nc \
        field_atm_export_inst_sw_flux_vis_dif.nc \
        field_atm_export_inst_sw_flux_vis_dir.nc \
        field_atm_export_inswfx.nc \
        field_atm_export_ips.nc \
        field_atm_export_ishfx.nc \
        field_atm_export_ishh2m.nc \
        field_atm_export_ish.nc \
        field_atm_export_ith2m.nc \
        field_atm_export_its.nc \
        field_atm_export_iuwh10m.nc \
        field_atm_export_ivisdifa.nc \
        field_atm_export_ivisdira.nc \
        field_atm_export_ivwh10m.nc \
        field_atm_export_izmfx.nc \
        field_atm_export_lprec.nc \
        field_atm_export_mdlwfx.nc \
        field_atm_export_mdswfx.nc \
        field_atm_export_mlhfx.nc \
        field_atm_export_mmmfx.nc \
        field_atm_export_mnlwfx.nc \
        field_atm_export_mnswfx.nc \
        field_atm_export_mshfx.nc \
        field_atm_export_mzmfx.nc \
        field_atm_export_sw_flux_nir_dif.nc \
        field_atm_export_sw_flux_nir_dir.nc \
        field_atm_export_sw_flux_vis_dif.nc \
        field_atm_export_sw_flux_vis_dir.nc \
        field_atm_export_sw_net_flux_nir_dif.nc \
        field_atm_export_sw_net_flux_nir_dir.nc \
        field_atm_export_sw_net_flux_vis_dif.nc \
        field_atm_export_sw_net_flux_vis_dir.nc \
        field_atm_import_sst.nc \
        field_med_from_atm_idlwfx.nc \
        field_med_from_atm_idswfx.nc \
        field_med_from_atm_iirdifa.nc \
        field_med_from_atm_iirdira.nc \
        field_med_from_atm_ilhfx.nc \
        field_med_from_atm_immfx.nc \
        field_med_from_atm_inlwfx.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dir.nc \
        field_med_from_atm_inst_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_sw_flux_vis_dir.nc \
        field_med_from_atm_inswfx.nc \
        field_med_from_atm_ips.nc \
        field_med_from_atm_ishfx.nc \
        field_med_from_atm_ishh2m.nc \
        field_med_from_atm_ish.nc \
        field_med_from_atm_ith2m.nc \
        field_med_from_atm_its.nc \
        field_med_from_atm_iuwh10m.nc \
        field_med_from_atm_ivisdifa.nc \
        field_med_from_atm_ivisdira.nc \
        field_med_from_atm_ivwh10m.nc \
        field_med_from_atm_izmfx.nc \
        field_med_from_atm_lprec.nc \
        field_med_from_atm_mdlwfx.nc \
        field_med_from_atm_mdswfx.nc \
        field_med_from_atm_mlhfx.nc \
        field_med_from_atm_mmmfx.nc \
        field_med_from_atm_mnlwfx.nc \
        field_med_from_atm_mnswfx.nc \
        field_med_from_atm_mshfx.nc \
        field_med_from_atm_mzmfx.nc \
        field_med_from_atm_sw_flux_nir_dif.nc \
        field_med_from_atm_sw_flux_nir_dir.nc \
        field_med_from_atm_sw_flux_vis_dif.nc \
        field_med_from_atm_sw_flux_vis_dir.nc \
        field_med_from_atm_sw_net_flux_nir_dif.nc \
        field_med_from_atm_sw_net_flux_nir_dir.nc \
        field_med_from_atm_sw_net_flux_vis_dif.nc \
        field_med_from_atm_sw_net_flux_vis_dir.nc \
        field_med_from_ocn_ssh.nc \
        field_med_from_ocn_sss.nc \
        field_med_from_ocn_sst.nc \
        field_med_from_ocn_uocn.nc \
        field_med_from_ocn_vocn.nc \
        field_med_to_atm_sst.nc \
        field_med_to_ocn_ips.nc \
        field_med_to_ocn_lprec.nc \
        field_med_to_ocn_mevap.nc \
        field_med_to_ocn_mmmfx.nc \
        field_med_to_ocn_mndifsfx.nc \
        field_med_to_ocn_mndirsfx.nc \
        field_med_to_ocn_mndvfsfx.nc \
        field_med_to_ocn_mndvrsfx.nc \
        field_med_to_ocn_mshfx.nc \
        field_med_to_ocn_mzmfx.nc \
        field_ocn_export_sea_lev.nc \
        field_ocn_export_s_surf.nc \
        field_ocn_export_t_surf.nc \
        field_ocn_export_u_surf.nc \
        field_ocn_export_v_surf.nc \
        field_ocn_import_lprec.nc \
        field_ocn_import_p.nc \
        field_ocn_import_q_flux.nc \
        field_ocn_import_sw_flux_nir_dif.nc \
        field_ocn_import_sw_flux_nir_dir.nc \
        field_ocn_import_sw_flux_vis_dif.nc \
        field_ocn_import_sw_flux_vis_dir.nc \
        field_ocn_import_t_flux.nc \
        field_ocn_import_u_flux.nc \
        field_ocn_import_v_flux.nc "
    #---------------------
    export_gsm
    export TASKS=64
    export WLCLK=60
    export CDATE=2009120100
    export NDAYS=1
    export wave=126 ; export lm=64 ; export lsoil=4
    export CPLFLX=.true.
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    export FHZER=1
    export FHOUT=1
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=mom5
    export ocn_petlist_bounds="32 55"
    export med_petlist_bounds="56 63"
    export med_atm_coupling_interval_sec=3600.0
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  ###############################################################################
  #
  # TEST   - GSM <-> Mediator <-> MOM5 on 64P
  #        -      1h           2h    coupling interval
  #        - Exchanging Fields
  #        - Starting at 2009120100, running for 8 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeusOFF -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM <-1h-> Mediator <-2h-> MOM5 ... 8 days on 64P"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_MED_MOM5_8days64P
    export CNTL_DIR=GFS_NODFI_2009120100_1h_2Way20140424_8days
    export LIST_FILES=" \
	sigf00 sigf01 sigf02 sigf04 sigf06 sigf12 sigf24 sigf48 sigf72 sigf96 \
	sfcf00 sfcf01 sfcf02 sfcf04 sfcf06 sfcf12 sfcf24 sfcf48 sfcf72 sfcf96 \
	flxf00 flxf01 flxf02 flxf04 flxf06 flxf12 flxf24 flxf48 flxf72 flxf96 \
        weights_ATM-TO-MED_inst_down_lw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_ir_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_ir_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_laten_heat_flx.nc  \
        weights_ATM-TO-MED_inst_merid_moment_flx.nc  \
        weights_ATM-TO-MED_inst_net_lw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_pres_height_surface.nc  \
        weights_ATM-TO-MED_inst_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_inst_spec_humid_height2m.nc  \
        weights_ATM-TO-MED_inst_surface_height.nc  \
        weights_ATM-TO-MED_inst_temp_height2m.nc  \
        weights_ATM-TO-MED_inst_temp_height_surface.nc  \
        weights_ATM-TO-MED_inst_u_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_vis_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_vis_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_v_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_zonal_moment_flx.nc  \
        weights_ATM-TO-MED_mean_down_lw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_laten_heat_flx.nc  \
        weights_ATM-TO-MED_mean_merid_moment_flx.nc  \
        weights_ATM-TO-MED_mean_net_lw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_prec_rate.nc  \
        weights_ATM-TO-MED_mean_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_mean_zonal_moment_flx.nc  \
        weights_MED-TO-ATM_sea_surface_temperature.nc  \
        weights_MED-TO-OCN_inst_pres_height_surface.nc  \
        weights_MED-TO-OCN_mean_evap_rate.nc  \
        weights_MED-TO-OCN_mean_merid_moment_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dir_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dir_flx.nc  \
        weights_MED-TO-OCN_mean_prec_rate.nc  \
        weights_MED-TO-OCN_mean_sensi_heat_flx.nc  \
        weights_MED-TO-OCN_mean_zonal_moment_flx.nc  \
        weights_OCN-TO-MED_sea_lev.nc  \
        weights_OCN-TO-MED_sea_surface_temperature.nc  \
        weights_OCN-TO-MED_s_surf.nc  \
        weights_OCN-TO-MED_u_surf.nc  \
        weights_OCN-TO-MED_v_surf.nc  \
        field_atm_export_idlwfx.nc \
        field_atm_export_idswfx.nc \
        field_atm_export_iirdifa.nc \
        field_atm_export_iirdira.nc \
        field_atm_export_ilhfx.nc \
        field_atm_export_immfx.nc \
        field_atm_export_inlwfx.nc \
        field_atm_export_inst_net_sw_flux_nir_dif.nc \
        field_atm_export_inst_net_sw_flux_nir_dir.nc \
        field_atm_export_inst_net_sw_flux_vis_dif.nc \
        field_atm_export_inst_net_sw_flux_vis_dir.nc \
        field_atm_export_inst_sw_flux_nir_dif.nc \
        field_atm_export_inst_sw_flux_nir_dir.nc \
        field_atm_export_inst_sw_flux_vis_dif.nc \
        field_atm_export_inst_sw_flux_vis_dir.nc \
        field_atm_export_inswfx.nc \
        field_atm_export_ips.nc \
        field_atm_export_ishfx.nc \
        field_atm_export_ishh2m.nc \
        field_atm_export_ish.nc \
        field_atm_export_ith2m.nc \
        field_atm_export_its.nc \
        field_atm_export_iuwh10m.nc \
        field_atm_export_ivisdifa.nc \
        field_atm_export_ivisdira.nc \
        field_atm_export_ivwh10m.nc \
        field_atm_export_izmfx.nc \
        field_atm_export_lprec.nc \
        field_atm_export_mdlwfx.nc \
        field_atm_export_mdswfx.nc \
        field_atm_export_mlhfx.nc \
        field_atm_export_mmmfx.nc \
        field_atm_export_mnlwfx.nc \
        field_atm_export_mnswfx.nc \
        field_atm_export_mshfx.nc \
        field_atm_export_mzmfx.nc \
        field_atm_export_sw_flux_nir_dif.nc \
        field_atm_export_sw_flux_nir_dir.nc \
        field_atm_export_sw_flux_vis_dif.nc \
        field_atm_export_sw_flux_vis_dir.nc \
        field_atm_export_sw_net_flux_nir_dif.nc \
        field_atm_export_sw_net_flux_nir_dir.nc \
        field_atm_export_sw_net_flux_vis_dif.nc \
        field_atm_export_sw_net_flux_vis_dir.nc \
        field_atm_import_sst.nc \
        field_med_from_atm_idlwfx.nc \
        field_med_from_atm_idswfx.nc \
        field_med_from_atm_iirdifa.nc \
        field_med_from_atm_iirdira.nc \
        field_med_from_atm_ilhfx.nc \
        field_med_from_atm_immfx.nc \
        field_med_from_atm_inlwfx.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dir.nc \
        field_med_from_atm_inst_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_sw_flux_vis_dir.nc \
        field_med_from_atm_inswfx.nc \
        field_med_from_atm_ips.nc \
        field_med_from_atm_ishfx.nc \
        field_med_from_atm_ishh2m.nc \
        field_med_from_atm_ish.nc \
        field_med_from_atm_ith2m.nc \
        field_med_from_atm_its.nc \
        field_med_from_atm_iuwh10m.nc \
        field_med_from_atm_ivisdifa.nc \
        field_med_from_atm_ivisdira.nc \
        field_med_from_atm_ivwh10m.nc \
        field_med_from_atm_izmfx.nc \
        field_med_from_atm_lprec.nc \
        field_med_from_atm_mdlwfx.nc \
        field_med_from_atm_mdswfx.nc \
        field_med_from_atm_mlhfx.nc \
        field_med_from_atm_mmmfx.nc \
        field_med_from_atm_mnlwfx.nc \
        field_med_from_atm_mnswfx.nc \
        field_med_from_atm_mshfx.nc \
        field_med_from_atm_mzmfx.nc \
        field_med_from_atm_sw_flux_nir_dif.nc \
        field_med_from_atm_sw_flux_nir_dir.nc \
        field_med_from_atm_sw_flux_vis_dif.nc \
        field_med_from_atm_sw_flux_vis_dir.nc \
        field_med_from_atm_sw_net_flux_nir_dif.nc \
        field_med_from_atm_sw_net_flux_nir_dir.nc \
        field_med_from_atm_sw_net_flux_vis_dif.nc \
        field_med_from_atm_sw_net_flux_vis_dir.nc \
        field_med_from_ocn_ssh.nc \
        field_med_from_ocn_sss.nc \
        field_med_from_ocn_sst.nc \
        field_med_from_ocn_uocn.nc \
        field_med_from_ocn_vocn.nc \
        field_med_to_atm_sst.nc \
        field_med_to_ocn_ips.nc \
        field_med_to_ocn_lprec.nc \
        field_med_to_ocn_mevap.nc \
        field_med_to_ocn_mmmfx.nc \
        field_med_to_ocn_mndifsfx.nc \
        field_med_to_ocn_mndirsfx.nc \
        field_med_to_ocn_mndvfsfx.nc \
        field_med_to_ocn_mndvrsfx.nc \
        field_med_to_ocn_mshfx.nc \
        field_med_to_ocn_mzmfx.nc \
        field_ocn_export_sea_lev.nc \
        field_ocn_export_s_surf.nc \
        field_ocn_export_t_surf.nc \
        field_ocn_export_u_surf.nc \
        field_ocn_export_v_surf.nc \
        field_ocn_import_lprec.nc \
        field_ocn_import_p.nc \
        field_ocn_import_q_flux.nc \
        field_ocn_import_sw_flux_nir_dif.nc \
        field_ocn_import_sw_flux_nir_dir.nc \
        field_ocn_import_sw_flux_vis_dif.nc \
        field_ocn_import_sw_flux_vis_dir.nc \
        field_ocn_import_t_flux.nc \
        field_ocn_import_u_flux.nc \
        field_ocn_import_v_flux.nc "
    #---------------------
    export_gsm
    export TASKS=64
    export WLCLK=240
    export CDATE=2009120100
    export NDAYS=8
    export wave=126 ; export lm=64 ; export lsoil=4
    export CPLFLX=.true.
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    export FHZER=1
    export FHOUT=1
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=mom5
    export ocn_petlist_bounds="32 55"
    export med_petlist_bounds="56 63"
    export med_atm_coupling_interval_sec=3600.0
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  ###############################################################################
  #
  # TEST   - GSM <-> Mediator <-> MOM5 on 96P
  #        -      1h           2h    coupling interval
  #        - Exchanging Fields
  #        - Starting at 2009120100, running for 8 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = gaea ] ; then

    export TEST_DESCR="NUOPC: GSM <-1h-> Mediator <-2h-> MOM5 ... 8 days on 96P"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_MED_MOM5_8days96P
    export CNTL_DIR=GFS_NODFI_2009120100_1h_2Way20140424_8days96P
    export LIST_FILES=" \
	sigf00 sigf01 sigf02 sigf04 sigf06 sigf12 sigf24 sigf48 sigf72 sigf96 \
	sfcf00 sfcf01 sfcf02 sfcf04 sfcf06 sfcf12 sfcf24 sfcf48 sfcf72 sfcf96 \
	flxf00 flxf01 flxf02 flxf04 flxf06 flxf12 flxf24 flxf48 flxf72 flxf96 \
        weights_ATM-TO-MED_inst_down_lw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_ir_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_ir_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_laten_heat_flx.nc  \
        weights_ATM-TO-MED_inst_merid_moment_flx.nc  \
        weights_ATM-TO-MED_inst_net_lw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_pres_height_surface.nc  \
        weights_ATM-TO-MED_inst_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_inst_spec_humid_height2m.nc  \
        weights_ATM-TO-MED_inst_surface_height.nc  \
        weights_ATM-TO-MED_inst_temp_height2m.nc  \
        weights_ATM-TO-MED_inst_temp_height_surface.nc  \
        weights_ATM-TO-MED_inst_u_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_vis_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_vis_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_v_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_zonal_moment_flx.nc  \
        weights_ATM-TO-MED_mean_down_lw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_laten_heat_flx.nc  \
        weights_ATM-TO-MED_mean_merid_moment_flx.nc  \
        weights_ATM-TO-MED_mean_net_lw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_prec_rate.nc  \
        weights_ATM-TO-MED_mean_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_mean_zonal_moment_flx.nc  \
        weights_MED-TO-ATM_sea_surface_temperature.nc  \
        weights_MED-TO-OCN_inst_pres_height_surface.nc  \
        weights_MED-TO-OCN_mean_evap_rate.nc  \
        weights_MED-TO-OCN_mean_merid_moment_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dir_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dir_flx.nc  \
        weights_MED-TO-OCN_mean_prec_rate.nc  \
        weights_MED-TO-OCN_mean_sensi_heat_flx.nc  \
        weights_MED-TO-OCN_mean_zonal_moment_flx.nc  \
        weights_OCN-TO-MED_sea_lev.nc  \
        weights_OCN-TO-MED_sea_surface_temperature.nc  \
        weights_OCN-TO-MED_s_surf.nc  \
        weights_OCN-TO-MED_u_surf.nc  \
        weights_OCN-TO-MED_v_surf.nc  \
        field_atm_export_idlwfx.nc \
        field_atm_export_idswfx.nc \
        field_atm_export_iirdifa.nc \
        field_atm_export_iirdira.nc \
        field_atm_export_ilhfx.nc \
        field_atm_export_immfx.nc \
        field_atm_export_inlwfx.nc \
        field_atm_export_inst_net_sw_flux_nir_dif.nc \
        field_atm_export_inst_net_sw_flux_nir_dir.nc \
        field_atm_export_inst_net_sw_flux_vis_dif.nc \
        field_atm_export_inst_net_sw_flux_vis_dir.nc \
        field_atm_export_inst_sw_flux_nir_dif.nc \
        field_atm_export_inst_sw_flux_nir_dir.nc \
        field_atm_export_inst_sw_flux_vis_dif.nc \
        field_atm_export_inst_sw_flux_vis_dir.nc \
        field_atm_export_inswfx.nc \
        field_atm_export_ips.nc \
        field_atm_export_ishfx.nc \
        field_atm_export_ishh2m.nc \
        field_atm_export_ish.nc \
        field_atm_export_ith2m.nc \
        field_atm_export_its.nc \
        field_atm_export_iuwh10m.nc \
        field_atm_export_ivisdifa.nc \
        field_atm_export_ivisdira.nc \
        field_atm_export_ivwh10m.nc \
        field_atm_export_izmfx.nc \
        field_atm_export_lprec.nc \
        field_atm_export_mdlwfx.nc \
        field_atm_export_mdswfx.nc \
        field_atm_export_mlhfx.nc \
        field_atm_export_mmmfx.nc \
        field_atm_export_mnlwfx.nc \
        field_atm_export_mnswfx.nc \
        field_atm_export_mshfx.nc \
        field_atm_export_mzmfx.nc \
        field_atm_export_sw_flux_nir_dif.nc \
        field_atm_export_sw_flux_nir_dir.nc \
        field_atm_export_sw_flux_vis_dif.nc \
        field_atm_export_sw_flux_vis_dir.nc \
        field_atm_export_sw_net_flux_nir_dif.nc \
        field_atm_export_sw_net_flux_nir_dir.nc \
        field_atm_export_sw_net_flux_vis_dif.nc \
        field_atm_export_sw_net_flux_vis_dir.nc \
        field_atm_import_sst.nc \
        field_med_from_atm_idlwfx.nc \
        field_med_from_atm_idswfx.nc \
        field_med_from_atm_iirdifa.nc \
        field_med_from_atm_iirdira.nc \
        field_med_from_atm_ilhfx.nc \
        field_med_from_atm_immfx.nc \
        field_med_from_atm_inlwfx.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_net_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_net_sw_flux_vis_dir.nc \
        field_med_from_atm_inst_sw_flux_nir_dif.nc \
        field_med_from_atm_inst_sw_flux_nir_dir.nc \
        field_med_from_atm_inst_sw_flux_vis_dif.nc \
        field_med_from_atm_inst_sw_flux_vis_dir.nc \
        field_med_from_atm_inswfx.nc \
        field_med_from_atm_ips.nc \
        field_med_from_atm_ishfx.nc \
        field_med_from_atm_ishh2m.nc \
        field_med_from_atm_ish.nc \
        field_med_from_atm_ith2m.nc \
        field_med_from_atm_its.nc \
        field_med_from_atm_iuwh10m.nc \
        field_med_from_atm_ivisdifa.nc \
        field_med_from_atm_ivisdira.nc \
        field_med_from_atm_ivwh10m.nc \
        field_med_from_atm_izmfx.nc \
        field_med_from_atm_lprec.nc \
        field_med_from_atm_mdlwfx.nc \
        field_med_from_atm_mdswfx.nc \
        field_med_from_atm_mlhfx.nc \
        field_med_from_atm_mmmfx.nc \
        field_med_from_atm_mnlwfx.nc \
        field_med_from_atm_mnswfx.nc \
        field_med_from_atm_mshfx.nc \
        field_med_from_atm_mzmfx.nc \
        field_med_from_atm_sw_flux_nir_dif.nc \
        field_med_from_atm_sw_flux_nir_dir.nc \
        field_med_from_atm_sw_flux_vis_dif.nc \
        field_med_from_atm_sw_flux_vis_dir.nc \
        field_med_from_atm_sw_net_flux_nir_dif.nc \
        field_med_from_atm_sw_net_flux_nir_dir.nc \
        field_med_from_atm_sw_net_flux_vis_dif.nc \
        field_med_from_atm_sw_net_flux_vis_dir.nc \
        field_med_from_ocn_ssh.nc \
        field_med_from_ocn_sss.nc \
        field_med_from_ocn_sst.nc \
        field_med_from_ocn_uocn.nc \
        field_med_from_ocn_vocn.nc \
        field_med_to_atm_sst.nc \
        field_med_to_ocn_ips.nc \
        field_med_to_ocn_lprec.nc \
        field_med_to_ocn_mevap.nc \
        field_med_to_ocn_mmmfx.nc \
        field_med_to_ocn_mndifsfx.nc \
        field_med_to_ocn_mndirsfx.nc \
        field_med_to_ocn_mndvfsfx.nc \
        field_med_to_ocn_mndvrsfx.nc \
        field_med_to_ocn_mshfx.nc \
        field_med_to_ocn_mzmfx.nc \
        field_ocn_export_sea_lev.nc \
        field_ocn_export_s_surf.nc \
        field_ocn_export_t_surf.nc \
        field_ocn_export_u_surf.nc \
        field_ocn_export_v_surf.nc \
        field_ocn_import_lprec.nc \
        field_ocn_import_p.nc \
        field_ocn_import_q_flux.nc \
        field_ocn_import_sw_flux_nir_dif.nc \
        field_ocn_import_sw_flux_nir_dir.nc \
        field_ocn_import_sw_flux_vis_dif.nc \
        field_ocn_import_sw_flux_vis_dir.nc \
        field_ocn_import_t_flux.nc \
        field_ocn_import_u_flux.nc \
        field_ocn_import_v_flux.nc "
    #---------------------
    export_gsm
    export TASKS=96
    export WLCLK=240
    export CDATE=2009120100
    export NDAYS=8
    export wave=126 ; export lm=64 ; export lsoil=4
    export CPLFLX=.true.
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    export FHZER=1
    export FHOUT=1
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 59"
    export ocn_model=mom5
    export ocn_petlist_bounds="60 83"
    export med_petlist_bounds="84 95"
    export med_atm_coupling_interval_sec=3600.0
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  ###############################################################################
  #                  DummyICE  
  #                     | 1h 
  # TEST   - GSM <-> Mediator <-> MOM5
  #        -      1h           2h    coupling interval
  #        - Exchanging Fields
  #        - Starting at 2009120100, running for 4 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeusOFF -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM <-1h-> MED <-1h-> DummyICE <-1h-> MED <-2h-> MOM5 ... 1 day"
#    export TEST_DESCR="NUOPC: GSM <-1h-> MED <-1h-> DummyICE <-1h-> MED <-2h-> MOM5 ... 4 days"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_DummyICE_MOM5
    export CNTL_DIR=GFS_NODFI_2009120100_1h_2Way20140424
    export LIST_FILES=" \
	sigf00 sigf01 sigf02 sigf04 sigf06 sigf12 sigf24 sigf48 sigf72 sigf96 \
	sfcf00 sfcf01 sfcf02 sfcf04 sfcf06 sfcf12 sfcf24 sfcf48 sfcf72 sfcf96 \
	flxf00 flxf01 flxf02 flxf04 flxf06 flxf12 flxf24 flxf48 flxf72 flxf96 \
        weights_ATM-TO-MED_inst_down_lw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_ir_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_ir_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_laten_heat_flx.nc  \
        weights_ATM-TO-MED_inst_merid_moment_flx.nc  \
        weights_ATM-TO-MED_inst_net_lw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_inst_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_inst_pres_height_surface.nc  \
        weights_ATM-TO-MED_inst_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_inst_spec_humid_height2m.nc  \
        weights_ATM-TO-MED_inst_surface_height.nc  \
        weights_ATM-TO-MED_inst_temp_height2m.nc  \
        weights_ATM-TO-MED_inst_temp_height_surface.nc  \
        weights_ATM-TO-MED_inst_u_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_vis_dif_albedo.nc  \
        weights_ATM-TO-MED_inst_vis_dir_albedo.nc  \
        weights_ATM-TO-MED_inst_v_wind_height10m.nc  \
        weights_ATM-TO-MED_inst_zonal_moment_flx.nc  \
        weights_ATM-TO-MED_mean_down_lw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_down_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_laten_heat_flx.nc  \
        weights_ATM-TO-MED_mean_merid_moment_flx.nc  \
        weights_ATM-TO-MED_mean_net_lw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_ir_dir_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dif_flx.nc  \
        weights_ATM-TO-MED_mean_net_sw_vis_dir_flx.nc  \
        weights_ATM-TO-MED_mean_prec_rate.nc  \
        weights_ATM-TO-MED_mean_sensi_heat_flx.nc  \
        weights_ATM-TO-MED_mean_zonal_moment_flx.nc  \
        weights_ICE-TO-MED_stress_on_air_ice_x.nc  \
        weights_ICE-TO-MED_stress_on_air_ice_y.nc  \
        weights_ICE-TO-MED_stress_on_ocn_ice_x.nc  \
        weights_ICE-TO-MED_stress_on_ocn_ice_y.nc  \
        weights_MED-TO-ATM_sea_surface_temperature.nc  \
        weights_MED-TO-ICE_ocn_current_x.nc  \
        weights_MED-TO-ICE_ocn_current_y.nc  \
        weights_MED-TO-ICE_sss_x.nc  \
        weights_MED-TO-ICE_sss_y.nc  \
        weights_MED-TO-ICE_wind_stress_x.nc  \
        weights_MED-TO-ICE_wind_stress_y.nc  \
        weights_MED-TO-OCN_inst_pres_height_surface.nc  \
        weights_MED-TO-OCN_mean_evap_rate.nc  \
        weights_MED-TO-OCN_mean_merid_moment_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_ir_dir_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dif_flx.nc  \
        weights_MED-TO-OCN_mean_net_sw_vis_dir_flx.nc  \
        weights_MED-TO-OCN_mean_prec_rate.nc  \
        weights_MED-TO-OCN_mean_sensi_heat_flx.nc  \
        weights_MED-TO-OCN_mean_zonal_moment_flx.nc  \
        weights_OCN-TO-MED_sea_lev.nc  \
        weights_OCN-TO-MED_sea_surface_temperature.nc  \
        weights_OCN-TO-MED_s_surf.nc  \
        weights_OCN-TO-MED_u_surf.nc  \
        weights_OCN-TO-MED_v_surf.nc  \
        field_atm_export_idlwfx.nc  \
        field_atm_export_idswfx.nc  \
        field_atm_export_iirdifa.nc  \
        field_atm_export_iirdira.nc  \
        field_atm_export_ilhfx.nc  \
        field_atm_export_immfx.nc  \
        field_atm_export_inlwfx.nc  \
        field_atm_export_inst_net_sw_flux_nir_dif.nc  \
        field_atm_export_inst_net_sw_flux_nir_dir.nc  \
        field_atm_export_inst_net_sw_flux_vis_dif.nc  \
        field_atm_export_inst_net_sw_flux_vis_dir.nc  \
        field_atm_export_inst_sw_flux_nir_dif.nc  \
        field_atm_export_inst_sw_flux_nir_dir.nc  \
        field_atm_export_inst_sw_flux_vis_dif.nc  \
        field_atm_export_inst_sw_flux_vis_dir.nc  \
        field_atm_export_inswfx.nc  \
        field_atm_export_ips.nc  \
        field_atm_export_ishfx.nc  \
        field_atm_export_ishh2m.nc  \
        field_atm_export_ish.nc  \
        field_atm_export_ith2m.nc  \
        field_atm_export_its.nc  \
        field_atm_export_iuwh10m.nc  \
        field_atm_export_ivisdifa.nc  \
        field_atm_export_ivisdira.nc  \
        field_atm_export_ivwh10m.nc  \
        field_atm_export_izmfx.nc  \
        field_atm_export_mdlwfx.nc  \
        field_atm_export_mdswfx.nc  \
        field_atm_export_mlhfx.nc  \
        field_atm_export_mmmfx.nc  \
        field_atm_export_mnlwfx.nc  \
        field_atm_export_mnswfx.nc  \
        field_atm_export_mprt.nc  \
        field_atm_export_mshfx.nc  \
        field_atm_export_mzmfx.nc  \
        field_atm_export_sw_flux_nir_dif.nc  \
        field_atm_export_sw_flux_nir_dir.nc  \
        field_atm_export_sw_flux_vis_dif.nc  \
        field_atm_export_sw_flux_vis_dir.nc  \
        field_atm_export_sw_net_flux_nir_dif.nc  \
        field_atm_export_sw_net_flux_nir_dir.nc  \
        field_atm_export_sw_net_flux_vis_dif.nc  \
        field_atm_export_sw_net_flux_vis_dir.nc  \
        field_atm_import_sst.nc  \
        field_ice_export_strairxT.nc  \
        field_ice_export_strairyT.nc  \
        field_ice_export_strocnxT.nc  \
        field_ice_export_strocnyT.nc  \
        field_ice_import_ss_tltx.nc  \
        field_ice_import_ss_tlty.nc  \
        field_ice_import_strax.nc  \
        field_ice_import_stray.nc  \
        field_ice_import_uocn.nc  \
        field_ice_import_vocn.nc  \
        field_med_from_atm_idlwfx.nc  \
        field_med_from_atm_idswfx.nc  \
        field_med_from_atm_iirdifa.nc  \
        field_med_from_atm_iirdira.nc  \
        field_med_from_atm_ilhfx.nc  \
        field_med_from_atm_immfx.nc  \
        field_med_from_atm_inlwfx.nc  \
        field_med_from_atm_inst_net_sw_flux_nir_dif.nc  \
        field_med_from_atm_inst_net_sw_flux_nir_dir.nc  \
        field_med_from_atm_inst_net_sw_flux_vis_dif.nc  \
        field_med_from_atm_inst_net_sw_flux_vis_dir.nc  \
        field_med_from_atm_inst_sw_flux_nir_dif.nc  \
        field_med_from_atm_inst_sw_flux_nir_dir.nc  \
        field_med_from_atm_inst_sw_flux_vis_dif.nc  \
        field_med_from_atm_inst_sw_flux_vis_dir.nc  \
        field_med_from_atm_inswfx.nc  \
        field_med_from_atm_ips.nc  \
        field_med_from_atm_ishfx.nc  \
        field_med_from_atm_ishh2m.nc  \
        field_med_from_atm_ish.nc  \
        field_med_from_atm_ith2m.nc  \
        field_med_from_atm_its.nc  \
        field_med_from_atm_iuwh10m.nc  \
        field_med_from_atm_ivisdifa.nc  \
        field_med_from_atm_ivisdira.nc  \
        field_med_from_atm_ivwh10m.nc  \
        field_med_from_atm_izmfx.nc  \
        field_med_from_atm_lprec.nc  \
        field_med_from_atm_mdlwfx.nc  \
        field_med_from_atm_mdswfx.nc  \
        field_med_from_atm_mlhfx.nc  \
        field_med_from_atm_mmmfx.nc  \
        field_med_from_atm_mnlwfx.nc  \
        field_med_from_atm_mnswfx.nc  \
        field_med_from_atm_mshfx.nc  \
        field_med_from_atm_mzmfx.nc  \
        field_med_from_atm_sw_flux_nir_dif.nc  \
        field_med_from_atm_sw_flux_nir_dir.nc  \
        field_med_from_atm_sw_flux_vis_dif.nc  \
        field_med_from_atm_sw_flux_vis_dir.nc  \
        field_med_from_atm_sw_net_flux_nir_dif.nc  \
        field_med_from_atm_sw_net_flux_nir_dir.nc  \
        field_med_from_atm_sw_net_flux_vis_dif.nc  \
        field_med_from_atm_sw_net_flux_vis_dir.nc  \
        field_med_from_ice_strairxT.nc  \
        field_med_from_ice_strairyT.nc  \
        field_med_from_ice_strocnxT.nc  \
        field_med_from_ice_strocnyT.nc  \
        field_med_from_ocn_ssh.nc  \
        field_med_from_ocn_sss.nc  \
        field_med_from_ocn_sst.nc  \
        field_med_from_ocn_uocn.nc  \
        field_med_from_ocn_vocn.nc  \
        field_med_to_atm_sst.nc  \
        field_med_to_ice_ss_tltx.nc  \
        field_med_to_ice_ss_tlty.nc  \
        field_med_to_ice_strax.nc  \
        field_med_to_ice_stray.nc  \
        field_med_to_ice_uocn.nc  \
        field_med_to_ice_vocn.nc  \
        field_med_to_ocn_ips.nc  \
        field_med_to_ocn_lprec.nc  \
        field_med_to_ocn_mdifsfx.nc  \
        field_med_to_ocn_mdirsfx.nc  \
        field_med_to_ocn_mdlwfx.nc  \
        field_med_to_ocn_mdvfsfx.nc  \
        field_med_to_ocn_mdvrsfx.nc  \
        field_med_to_ocn_mlhfx.nc  \
        field_med_to_ocn_mmmfx.nc  \
        field_med_to_ocn_mshfx.nc  \
        field_med_to_ocn_mzmfx.nc  \
        field_ocn_export_sea_lev.nc  \
        field_ocn_export_s_surf.nc  \
        field_ocn_export_t_surf.nc  \
        field_ocn_export_u_surf.nc  \
        field_ocn_export_v_surf.nc  \
        field_ocn_import_lprec.nc  \
        field_ocn_import_lw_flux.nc  \
        field_ocn_import_p.nc  \
        field_ocn_import_q_flux.nc  \
        field_ocn_import_sw_flux_nir_dif.nc  \
        field_ocn_import_sw_flux_nir_dir.nc  \
        field_ocn_import_sw_flux_vis_dif.nc  \
        field_ocn_import_sw_flux_vis_dir.nc  \
        field_ocn_import_t_flux.nc  \
        field_ocn_import_u_flux.nc  \
        field_ocn_import_v_flux.nc  "
#    export LIST_FILES=" \
#	sigf00 sigf01 sigf02 sigf24 sigf25 sigf26 sigf48 sigf72 sigf95 sigf96 \
#	sfcf00 sfcf01 sfcf02 sfcf24 sfcf25 sfcf26 sfcf48 sfcf72 sfcf95 sfcf96 \
#	flxf00 flxf01 flxf02 flxf24 flxf25 flxf26 flxf48 flxf72 flxf95 flxf96"
    #---------------------
    export_gsm
    export TASKS=66
    export WLCLK=60
    export CDATE=2009120100
    export NDAYS=1
#    export NDAYS=4
    export wave=126 ; export lm=64 ; export lsoil=4
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    export FHZER=1
    export FHOUT=1
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=mom5
    export ocn_petlist_bounds="32 55"
    export ice_model=dummy
    export ice_petlist_bounds="64 65"
    export med_petlist_bounds="56 63"
    export med_atm_coupling_interval_sec=3600.0
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  ###############################################################################
  #                   CICE  
  #                     | 1h 
  # TEST   - GSM <-> Mediator <-> MOM5
  #        -      1h           2h    coupling interval
  #        - Exchanging Fields
  #        - Starting at 2009120100, running for 4 days
  #
  ###############################################################################

  if [ $MACHINE_ID = zeusOFF -o $MACHINE_ID = gaeaOFF ] ; then

    export TEST_DESCR="NUOPC: GSM <-1h-> MED <-1h-> CICE <-1h-> MED <-2h-> MOM5 ... 1 day"
#    export TEST_DESCR="NUOPC: GSM <-1h-> MED <-1h-> CICE <-1h-> MED <-2h-> MOM5 ... 4 days"

    #---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GSM_CICE_MOM5
    export CNTL_DIR=GFS_NODFI_2009120100_1h_2Way20140424
    export LIST_FILES=" \
	sigf00 sigf01 sigf02 sigf04 sigf06 sigf12 sigf24  \
	sfcf00 sfcf01 sfcf02 sfcf04 sfcf06 sfcf12 sfcf24  \
	flxf00 flxf01 flxf02 flxf04 flxf06 flxf12 flxf24 "
#    export LIST_FILES=" \
#	sigf00 sigf01 sigf02 sigf24 sigf25 sigf26 sigf48 sigf72 sigf95 sigf96 \
#	sfcf00 sfcf01 sfcf02 sfcf24 sfcf25 sfcf26 sfcf48 sfcf72 sfcf95 sfcf96 \
#	flxf00 flxf01 flxf02 flxf24 flxf25 flxf26 flxf48 flxf72 flxf95 flxf96"
    #---------------------
    export_gsm
    export TASKS=66
    export WLCLK=60
#    export WLCLK=60
    export CDATE=2009120100
    export NDAYS=1
#    export NDAYS=4
    export wave=126 ; export lm=64 ; export lsoil=4
    export A2OI_OUT=.true.
    export NGRID_A2OI=44
    export FHZER=1
    export FHOUT=1
    # - nems.configure ---
    export_nems
    export atm_model=gsm
    export atm_petlist_bounds="0 31"
    export ocn_model=mom5
    export ocn_petlist_bounds="32 55"
    export ice_model=cice
    export ice_petlist_bounds="56 59"
    export med_petlist_bounds="60 65"
    export med_atm_coupling_interval_sec=3600.0
    export med_ocn_coupling_interval_sec=7200.0
    #---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
    #---------------------

  fi # endif machine
  
  #----------------------------------------------

  echo "Finished the NEMS with NUOPC test suite"

  rm -f err out configure_file* nmm_ll nmm_msub nmm_run gfs_fcst_run gfs_ll gen_fcst_run gen_ll fim_fcst_run fim_ll
  if [ ${CLEAN_RUNDIR:-YES} = YES ] ; then
    rm -rf ${RUNDIR_ROOT}
  fi

  date >> ${REGRESSIONTEST_LOG}

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = wcoss ]; then
    echo REGRESSION TEST WAS SUCCESSFUL
    echo REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
  else
    banner REGRESSION TEST WAS SUCCESSFUL
    banner REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
  fi

  exit
  #----------------------------------------------

  echo "Finished the NEMS with NUOPC test suite"

  rm -f err out configure_file* nmm_ll nmm_msub nmm_run gfs_fcst_run gfs_ll gen_fcst_run gen_ll fim_fcst_run fim_ll
  if [ ${CLEAN_RUNDIR:-YES} = YES ] ; then
    rm -rf ${RUNDIR_ROOT}
  fi

  date >> ${REGRESSIONTEST_LOG}

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = wcoss ]; then
    echo REGRESSION TEST WAS SUCCESSFUL
    echo REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
  else
    banner REGRESSION TEST WAS SUCCESSFUL
    banner REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
  fi

  exit
fi # endif NUOPC

#################################################################
# On ZEUS machine:
# Clean and compile both NMMB & GFS cores, using ESMF 3.1.0r API.
# On WCOSS machine:
# Clean and compile NMMB core, using ESMF 6.3.0r series library
# and ics/12.1 compiler,as the NEMS.x_630r_nmm.
# Clean and compile GSM core, using ESMF 6.3.0r series library
# and ics/14.0.1 compiler,as the NEMS.x_630r_gsm.
# When tests related to the GOCART, Clean and compile both NMMB &
# GFS cores, using ESMF 3.1.0r API.
#################################################################

if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = gfs -o $CB_arg = all ] ; then

 echo "Preparing for regression tests"

 if [ ${COMPILE_SORC:-YES} = YES ] ; then
  echo "Preparing model code for regression tests"
  if [ $MACHINE_ID = wcoss ]; then
  echo "Using an ESMF 3.1.0r series library for GSM which related to the GOCART"
  echo "    "
  echo "Using an ESMF 6.3.0r series library and ics/12.1 compiler for NMM tests"
  echo "Using an ESMF 6.3.0r series library and ics/14.0.1 compiler for all other GSM tests"
  printf %s "Using an ESMF 3.1.0r series library for GSM which related to the GOCART.  "
  printf %s "Using an ESMF 6.3.0r series library and ics/12.1 compiler for NMM tests"
  printf %s "Using an ESMF 6.3.0r series library and ics/14.0.1 compiler for all other GSM tests"
  elif [ $MACHINE_ID = zeus ]; then
  echo "Using an ESMF 3.1.0r series library and intel 12 compiler for NMM and GSM which related to the GOCART"
  echo "    "
  echo "Using an ESMF 6.3.0r series library and intel 13 compiler for all other GSM tests"
  printf %s "Using an ESMF 3.1.0r series library and intel 12 compiler for NMM and GSM which related to the GOCART"
  printf %s "    "
  printf %s "Using an ESMF 6.3.0r series library and intel 13 compiler for all other GSM tests"
  else
  echo "Using an ESMF 3.1.0r series library"
  printf %s "Using an ESMF 3.1.0r series library.   "
  fi

  printf %s "Compiling model code (this will take some time)......."
  cd ${PATHTR}/src

  date                                     >> ${REGRESSIONTEST_LOG}
  echo "Compilation ALL"                   >> ${REGRESSIONTEST_LOG}
  rm -f ${PATHTR}/exe/NEMS.x

  if [ $MACHINE_ID = wcoss ]; then

# Since the GOCART tests still need to fix on the wcoss machine,
# skip the ESMF 3.1.0rp5 compiling process.
#    ./esmf_version 3_wcoss                 >> ${COMPILE_LOG} 2>&1
#    gmake clean                            >> ${COMPILE_LOG} 2>&1
#    gmake nmm_gsm_gen GOCART_MODE=full     >> ${COMPILE_LOG} 2>&1
#    mv ../exe/NEMS.x ../exe/NEMS.x_310r

# Compiling NMMB model with the old ics/12.1 compiler 
# and the ESMF 6.3.0r library.
#----------------------------------------------------
    . /usrx/local/Modules/3.2.9/init/ksh
    module unload ics
    module load ics/12.1
    module unload NetCDF
    module load NetCDF
    module list
    ./esmf_version 6.3r_wcoss_nmm          >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm                              >> ${COMPILE_LOG} 2>&1
    mv ../exe/NEMS.x ../exe/NEMS.x_630r_nmm

# Compiling GSM model with the new ics/14.0.1 compiler 
# and the ESMF 6.3.0r library.
#-----------------------------------------------------
    . /usrx/local/Modules/3.2.9/init/ksh
    module unload ics
# Compile gsm using the new 14.0.1 ics compiler.
#-----------------------------------------------
    module load ics/14.0.1
    module list
    export MKL_NUM_THREADS=1
    export MKL_CBWR=AVX

    ./esmf_version 6.3r_wcoss_gsm          >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake gsm                              >> ${COMPILE_LOG} 2>&1
    mv ../exe/NEMS.x ../exe/NEMS.x_630r_gsm
    export MP_MPILIB=pempi

  elif [ $MACHINE_ID = gaea ]; then

    ./esmf_version 3_zeus                  >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm_gen GOCART_MODE=full     >> ${COMPILE_LOG} 2>&1

  elif [ $MACHINE_ID = zeus ]; then
# Compiling NMMB model and the GFS GOCART test with the default 
# intel/12-12.0.4.191 compiler and the ESMF 3.1.0rp5 library.
#--------------------------------------------------------------
    ./esmf_version 3_zeus                  >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm_gen GOCART_MODE=full     >> ${COMPILE_LOG} 2>&1
    mv ../exe/NEMS.x ../exe/NEMS.x_310r_nmm

# Compiling GSM model with the new intel/13.0.079 compiler 
# and the ESMF 6.3.0r library.
#---------------------------------------------------------
    ./esmf_version 6_zeus                  >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake gsm                              >> ${COMPILE_LOG} 2>&1
    mv ../exe/NEMS.x ../exe/NEMS.x_630r_gsm
 fi

 else
  cd ${PATHTR}/src
  echo ' Compilation bypassed'
 fi
 date                                     >> ${REGRESSIONTEST_LOG}

fi # endif compilation

cd $PATHRT

###############################################################################
#
# TEST   - Global NMM-B with pure binary input
#        - 6x5 compute  tasks / 1 thread / opnl physics / free fcst / pure binary input
#
###############################################################################

if [ ${SKIP_NMM:-NO} = YES ] ; then
 echo "Skipping NMMB tests"
else

 if [ $MACHINE_ID = wcoss ]; then
  cp ../../exe/NEMS.x_630r_nmm ../../exe/NEMS.x
 fi

 if [ $MACHINE_ID = zeus ]; then
  cp ../../exe/NEMS.x_310r_nmm ../../exe/NEMS.x
 fi

 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Compare NMMB-global results with previous trunk version"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_CNTRL
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
  nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = wcoss ]; then
   export timing1=`grep total_integration_tim $RUNDIR/err | tail -1 | awk '{ print $5 }'`
  elif [ $MACHINE_ID = gaea ]; then
   export timing1=`grep total_integration_tim $RUNDIR/err | tail -1 | awk '{ print $4 }'`
  fi
  export timingc=`cat ${RTPWD}/NMMB_glob/timing.txt`
  (echo " Original timing: " $timingc " , test_glob timing: " $timing1;echo;echo)>> ${REGRESSIONTEST_LOG}
  echo " Original timing: " $timingc " , test_glob timing: " $timing1;echo;echo

 fi # endif test


 ###############################################################################
 #
 # TEST   - Global NMM-B with NEMSIO input
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / nemsio input
 #
 ###############################################################################


 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-global NEMSIO as input file"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_NEMSIO
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
  nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob ; export NEMSI=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Global NMM-B restart from pure binary input
 #        - 6x5 compute tasks / 1 thread / opnl physics / restart / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-global restart run"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REST
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0048h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Global NMM-B restart from NEMSIO input
 #        - 6x5 compute tasks / 1 thread / opnl physics / restart / nemsio input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-global restart run from NEMSIO file"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REST_NIO
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0048h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob ; export NEMSI=true ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Global NMM-B with different domain decomposition
 #        - 3x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-global different decomposition"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_DECOMP
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob   ; export FCSTL=24
  export INPES=$JNPES_dflt ; export JNPES=$INPES_dflt
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Global NMM-B with multiple threads
 #        - 6x5 compute tasks / 2 threads / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-global threading "

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_THREAD
  export CNTL_DIR=NMMB_glob
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s        \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
  nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=glob ; export THRD=2
  export TASKS=$TASKS_thrd ; export TPN=$TPN_thrd
  export INPES=$INPES_thrd ; export JNPES=$JNPES_thrd ; export WTPG=$WTPG_thrd
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Global NMM-B with GFS physics
 #        - 6x5 compute tasks / 1 thread / GFS physics / free fcst / pure binary input
 #
 ###############################################################################

# if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ]; then
#
#  export TEST_DESCR="Test NMMB-global with GFS physics package "
#
##---------------------
#  (( TEST_NR=TEST_NR+1 ))
#  export RUNDIR=${RUNDIR_ROOT}/NMM_gfsP
#  export CNTL_DIR=NMMB_gfsP_glob
#  export LIST_FILES=" \
#  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
#  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
#  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
##---------------------
#  export_nmm
#  export GBRG=glob ; export gfsP=true ; export FCSTL=24
##---------------------
#   ./rt_nmm.sh
#   if [ $? = 2 ]; then exit ; fi
##---------------------
#
# fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with pure binary input
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ]; then

  export TEST_DESCR="Compare NMMB-regional results with previous trunk version"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_CTL
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_nio_0000h_00m_00.00s \
  nmmb_hst_01_bin_0012h_00m_00.00s nmmb_hst_01_nio_0012h_00m_00.00s \
  nmmb_hst_01_bin_0048h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
  nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s \
  pcp.hr1.01.bin  pcp.hr2.01.bin  pcp.hr3.01.bin  pcp.hr4.01.bin    \
  pcp.hr5.01.bin  pcp.hr6.01.bin  pcp.hr7.01.bin"
#---------------------
  export_nmm
  export GBRG=reg ; export WPREC=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  if [ $MACHINE_ID = zeus -o $MACHINE_ID = wcoss ]; then
   export timing1=`grep total_integration_tim $RUNDIR/err | tail -1 | awk '{ print $5 }'`
  elif [ $MACHINE_ID = gaea ]; then
   export timing1=`grep total_integration_tim $RUNDIR/err | tail -1 | awk '{ print $4 }'`
  fi
  export timingc=`cat ${RTPWD}/NMMB_reg/timing.txt`
 (echo " Original timing: " $timingc " , test_reg timing: " $timing1;echo;echo)>> ${REGRESSIONTEST_LOG}
  echo " Original timing: " $timingc " , test_reg timing: " $timing1;echo;echo

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with NEMSIO input
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / nemsio input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional NEMSIO as input file"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_NEMSIO
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0012h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export NEMSI=true ; export FCSTL=12
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B restart with pure binary input
 #        - 6x5 compute tasks / 1 thread / opnl physics / restart / pure binary input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional restart run"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_RST
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0048h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B restart with NEMSIO input
 #        - 6x5 compute tasks / 1 thread / opnl physics / restart / nemsio input
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional restart run with NEMSIO file "

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_RST_NIO
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0048h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export NEMSI=true ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with different domain decomposition
 #        - 3x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional different decomposition"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_DECOMP
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg    ; export FCSTL=12
  export INPES=$JNPES_dflt ; export JNPES=$INPES_dflt
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with multiple threads
 #        - 6x5 compute tasks / 2 threads / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional threading "

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_THREAD
  export CNTL_DIR=NMMB_reg
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
  nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export THRD=2
  export TASKS=$TASKS_thrd ; export TPN=$TPN_thrd
  export INPES=$INPES_thrd ; export JNPES=$JNPES_thrd ; export WTPG=$WTPG_thrd
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with GFS physics
 #        - 6x5 compute tasks / 1 thread / GFS physics / free fcst / pure binary input
 #
 ###############################################################################

# if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then
#
#  export TEST_DESCR="Test NMMB-regional with GFS physics package "
#
##---------------------
#  (( TEST_NR=TEST_NR+1 ))
#  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_gfsP
#  export CNTL_DIR=NMMB_gfsP_reg
#  export LIST_FILES=" \
#  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
#  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
#  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
##---------------------
#  export_nmm
#  export GBRG=reg ; export gfsP=true ; export FCSTL=24
##---------------------
#   ./rt_nmm.sh
#   if [ $? = 2 ]; then exit ; fi
##---------------------
#
# fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with selected GFS physics schemes
 #        - 6x5 compute tasks / 1 thread / selected GFS physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with selected GFS physics schemes "

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_SEL_PHY
  export CNTL_DIR=NMMB_reg_sel_phy
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg  ; export FCSTL=24
  export CONVC=sas ; export MICRO=gfs ; export TURBL=gfs
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with NEMSIO input
 #        - 6x5 compute tasks / 1 thread / separate species advection / NEMSIO input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with separate species advection ON"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_SPEC_ADV
  export CNTL_DIR=NMMB_reg_spec_adv
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export SPEC_ADV=true ; export FCSTL=24 ; export NEMSI=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B restart with binary input
 #        - 6x5 compute tasks / 1 thread / separate species advection / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional restarted run with separate species advection ON"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_SPEC_ADV_RST
  export CNTL_DIR=NMMB_reg_spec_adv
  export LIST_FILES=" \
  nmmb_hst_01_bin_0024h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg ; export SPEC_ADV=true ; export FCSTL=24 ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with selected physics schemes (WSM6, GFDL)
 #        - 6x5 compute tasks / 1 thread / selected GFS physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with physics schemes WSM6 and GFDL"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_WSM6_GFDL
  export CNTL_DIR=NMMB_reg_wsm6_gfdl
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg   ; export FCSTL=24
  export MICRO=wsm6 ; export RADTN=gfdl
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with selected physics schemes (WSM6, RRTM)
 #        - 6x5 compute tasks / 1 thread / selected GFS physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with physics schemes WSM6 and RRTM"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_WSM6_RRTM
  export CNTL_DIR=NMMB_reg_wsm6_rrtm
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg   ; export FCSTL=24
  export MICRO=wsm6 ; export RADTN=rrtm
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with selected physics schemes (SAS, ZHAO)
 #        - 6x5 compute tasks / 1 thread / selected GFS physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with physics schemes SAS and ZHAO"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_SAS_ZHAO
  export CNTL_DIR=NMMB_reg_sas_zhao
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg  ; export FCSTL=24
  export CONVC=sas ; export MICRO=gfs
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B with THOMPSON microphysics
 #        - 6x5 compute tasks / 1 thread / THOMPSON / free fcst / pure binary input
 #
 ###############################################################################

 if [ 0 = 1 ] ; then # temporary turned off
 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with THOMPSON microphysics scheme "

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_THOMP
  export CNTL_DIR=NMMB_reg_thomp
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg   ; export FCSTL=24       ; export WLCLK=35
  export MICRO=thompson ; export SPEC_ADV=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test
 fi # temporary turned off

 ###############################################################################
 #
 # TEST   - Regional NMM-B with precipitation adjustment on
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with precipitation adjustment on"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_PCPADJ
  export CNTL_DIR=NMMB_reg_pcpadj
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0012h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0012h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=reg    ; export FCSTL=12 ; export PCPFLG=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B writing time series
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################


 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional writing time series"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_TIMESR
  export CNTL_DIR=NMMB_reg_timesr
  export LIST_FILES=" \
  nmmb_hst_01_bin_0006h_00m_00.00s ts_p01_d01.bin ts_p02_d01.bin"
#---------------------
  export_nmm
  export GBRG=reg ; export TS=true ; export FCSTL=06
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - NMM-B static nests: Regional parent with two children and one grandchild
 #        - Compute tasks - Upper parent 2x3 | Child #1 4x8 | Child #2 2x4 | Grandchild 7x10
 #        - 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

  export TEST_DESCR="Test NMMB-regional with static nests"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_nests
  export CNTL_DIR=NMMB_nests
  export LIST_FILES=" \
  nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
  nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s \
  nmmb_hst_02_bin_0000h_00m_00.00s nmmb_hst_02_bin_0024h_00m_00.00s \
  nmmb_hst_02_nio_0000h_00m_00.00s nmmb_hst_02_nio_0024h_00m_00.00s \
  nmmb_rst_02_bin_0012h_00m_00.00s nmmb_rst_02_nio_0012h_00m_00.00s \
  nmmb_hst_03_bin_0000h_00m_00.00s nmmb_hst_03_bin_0024h_00m_00.00s \
  nmmb_hst_03_nio_0000h_00m_00.00s nmmb_hst_03_nio_0024h_00m_00.00s \
  nmmb_rst_03_bin_0012h_00m_00.00s nmmb_rst_03_nio_0012h_00m_00.00s \
  nmmb_hst_04_bin_0000h_00m_00.00s nmmb_hst_04_bin_0024h_00m_00.00s \
  nmmb_hst_04_nio_0000h_00m_00.00s nmmb_hst_04_nio_0024h_00m_00.00s \
  nmmb_rst_04_bin_0012h_00m_00.00s nmmb_rst_04_nio_0012h_00m_00.00s"
# ---------------------
  export_nmm
  export GBRG=nests ; export FCSTL=24 ; export NCHILD=02
  export AFFN=cpu   ; export NODE=3   ; export WLCLK=45
  export TASKS=$TASKS_nest ; export TPN=$TPN_nest
  export INPES=$INPES_nest ; export JNPES=$JNPES_nest ; export WTPG=$WTPG_nest
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test


 ###############################################################################
 #
 # TEST   - NMM-B restart static nests: Regional parent with two children and one grandchild
 #        - Compute tasks - Upper parent 2x3 | Child #1 4x8 | Child #2 2x4 | Grandchild 7x10
 #        - 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ] ; then

  export TEST_DESCR="Test NMMB-regional static nests with restart"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_nest_rest
  export CNTL_DIR=NMMB_nests
  export LIST_FILES=" \
  nmmb_hst_01_bin_0024h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
  nmmb_hst_02_bin_0024h_00m_00.00s nmmb_hst_02_nio_0024h_00m_00.00s \
  nmmb_hst_03_bin_0024h_00m_00.00s nmmb_hst_03_nio_0024h_00m_00.00s \
  nmmb_hst_04_bin_0024h_00m_00.00s nmmb_hst_04_nio_0024h_00m_00.00s"
#---------------------
  export_nmm
  export RSTRT=true
  export GBRG=nests ; export FCSTL=24 ; export NCHILD=02
  export AFFN=cpu   ; export NODE=3   ; export WLCLK=40
  export TASKS=$TASKS_nest ; export TPN=$TPN_nest
  export INPES=$INPES_nest ; export JNPES=$JNPES_nest ; export WTPG=$WTPG_nest
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - Regional NMM-B static nests with filter
 #        - Compute tasks - Upper parent 2x2 | Child #1 3x5 | Grandchild 6x7
 #        - 1 thread / opnl physics / free fcst / nemsio binary input
 #
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ]; then

  export TEST_DESCR="Test NMMB-regional digital filter with static nests"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/NMM_REG_FILT
  export CNTL_DIR=NMMB_reg_filt
  export LIST_FILES=" \
  nmmb_hst_01_bin_0003h_00m_00.00s nmmb_hst_01_nio_0003h_00m_00.00s \
  nmmb_hst_02_bin_0003h_00m_00.00s nmmb_hst_02_nio_0003h_00m_00.00s \
  nmmb_hst_03_bin_0003h_00m_00.00s nmmb_hst_03_nio_0003h_00m_00.00s"
#---------------------
  export_nmm
  export GBRG=fltr  ; export FCSTL=03 ; export AFFN=cpu
  export NEMSI=true ; export NCHILD=01
  export TASKS=$TASKS_fltr ; export TPN=$TPN_fltr
  export INPES=$INPES_fltr ; export JNPES=$JNPES_fltr ; export WTPG=$WTPG_fltr
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

####################################################################################################
#
# TEST   - NMM-B 1-way moving nests: Regional parent with two children and one grandchild
#        - Compute tasks - Upper parent 8x8 | Child #1 2x6 | Child #2 2x6 | Grandchild 5x6
#        - 1 thread / opnl physics / free fcst / nemsio binary input
#
####################################################################################################

if [ ${RT_FULL} = true -o ${CB_arg} = nmm -o ${CB_arg} = all ]; then

  export TEST_DESCR="Test NMMB-regional with moving nests"

#---------------------
(( TEST_NR=TEST_NR+1 ))
export RUNDIR=${RUNDIR_ROOT}/NMM_mvg_nests
export CNTL_DIR=NMMB_mvg_nests
export LIST_FILES=" \
nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s \
nmmb_hst_02_bin_0000h_00m_00.00s nmmb_hst_02_bin_0024h_00m_00.00s \
nmmb_hst_02_nio_0000h_00m_00.00s nmmb_hst_02_nio_0024h_00m_00.00s \
nmmb_rst_02_bin_0012h_00m_00.00s nmmb_rst_02_nio_0012h_00m_00.00s \
nmmb_hst_03_bin_0000h_00m_00.00s nmmb_hst_03_bin_0024h_00m_00.00s \
nmmb_hst_03_nio_0000h_00m_00.00s nmmb_hst_03_nio_0024h_00m_00.00s \
nmmb_rst_03_bin_0012h_00m_00.00s nmmb_rst_03_nio_0012h_00m_00.00s \
nmmb_hst_04_bin_0000h_00m_00.00s nmmb_hst_04_bin_0024h_00m_00.00s \
nmmb_hst_04_nio_0000h_00m_00.00s nmmb_hst_04_nio_0024h_00m_00.00s \
nmmb_rst_04_bin_0012h_00m_00.00s nmmb_rst_04_nio_0012h_00m_00.00s"
#---------------------
   export_nmm
   export GBRG=mnests ; export FCSTL=24 ; export NCHILD=02
   export NEMSI=true  ; export WLCLK=12 ; export NODE=3
   export TASKS=$TASKS_mvg1 ; export TPN=$TPN_mvg1
   export INPES=$INPES_mvg1 ; export JNPES=$JNPES_mvg1 ; export WTPG=$WTPG_mvg1
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test

####################################################################################################
#
# TEST   - NMM-B 1-way moving nests: (RESTART) Regional parent with two children and one grandchild
#        - Compute tasks - Upper parent 8x8 | Child #1 2x6 | Child #2 2x6 | Grandchild 5x6
#        - 1 thread / opnl physics / free fcst / nemsio input
#
####################################################################################################

if [ ${RT_FULL} = true ]; then

  export TEST_DESCR="Test NMMB-regional with moving nests - RESTART"

#---------------------
(( TEST_NR=TEST_NR+1 ))
export RUNDIR=${RUNDIR_ROOT}/NMM_mvg_nests_restart
export CNTL_DIR=NMMB_mvg_nests
export LIST_FILES=" \
nmmb_hst_01_bin_0024h_00m_00.00s \
nmmb_hst_01_nio_0024h_00m_00.00s \
nmmb_hst_02_bin_0024h_00m_00.00s \
nmmb_hst_02_nio_0024h_00m_00.00s \
nmmb_hst_03_bin_0024h_00m_00.00s \
nmmb_hst_03_nio_0024h_00m_00.00s \
nmmb_hst_04_bin_0024h_00m_00.00s \
nmmb_hst_04_nio_0024h_00m_00.00s"
#---------------------
export_nmm
export GBRG=mnests ; export FCSTL=24 ; export NCHILD=02
export NEMSI=true  ; export WLCLK=20 ; export NODE=3
export TASKS=$TASKS_mvg1 ; export TPN=$TPN_mvg1
export INPES=$INPES_mvg1 ; export JNPES=$JNPES_mvg1 ; export WTPG=$WTPG_mvg1
export RSTRT=true
#---------------------
  ./rt_nmm.sh
  if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test

####################################################################################################
#
# TEST   - NMM-B 1-way moving nests: Same as above except with generational task assignments.
#        - Check the execution when children do NOT provide data to parents.
#        - Compute tasks - Upper parent 5x18 | Child #1 5x9 | Child #2 5x9 | Grandchild 10x9
#        - 1 thread / opnl physics / free fcst / nemsio and pure binary input
#
####################################################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional with 1-way moving nests and generational task assignments"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/NMM_mvg_nests_gens
   export CNTL_DIR=NMMB_mvg_nests
   export LIST_FILES=" \
   nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
   nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
   nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s \
   nmmb_hst_02_bin_0000h_00m_00.00s nmmb_hst_02_bin_0024h_00m_00.00s \
   nmmb_hst_02_nio_0000h_00m_00.00s nmmb_hst_02_nio_0024h_00m_00.00s \
   nmmb_rst_02_bin_0012h_00m_00.00s nmmb_rst_02_nio_0012h_00m_00.00s \
   nmmb_hst_03_bin_0000h_00m_00.00s nmmb_hst_03_bin_0024h_00m_00.00s \
   nmmb_hst_03_nio_0000h_00m_00.00s nmmb_hst_03_nio_0024h_00m_00.00s \
   nmmb_rst_03_bin_0012h_00m_00.00s nmmb_rst_03_nio_0012h_00m_00.00s \
   nmmb_hst_04_bin_0000h_00m_00.00s nmmb_hst_04_bin_0024h_00m_00.00s \
   nmmb_hst_04_nio_0000h_00m_00.00s nmmb_hst_04_nio_0024h_00m_00.00s \
   nmmb_rst_04_bin_0012h_00m_00.00s nmmb_rst_04_nio_0012h_00m_00.00s"
#---------------------
   export_nmm
   export GBRG=mnests ; export FCSTL=24 ; export NCHILD=02
   export NEMSI=true  ; export WLCLK=15 ; export NODE=3
   export AFFN=cpu    ; export MODE=2-way
   export TASKS=$TASKS_mvg2 ; export TPN=$TPN_mvg2
   export INPES=$INPES_mvg2 ; export JNPES=$JNPES_mvg2 ; export WTPG=$WTPG_mvg2
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

####################################################################################################
#
# TEST   - NMM-B moving nests: Use generational task assignments and 2-way exchange.
#        - Compute tasks - Upper parent 5x18 | Child #1 5x9 | Child #2 5x9 | Grandchild 10x9
#        - 1 thread / opnl physics / free fcst / nemsio and pure binary input
#
####################################################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ]; then

  export TEST_DESCR="Test NMMB-regional with 2-way moving nests"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/NMM_2way_nests
   export CNTL_DIR=NMMB_2way_nests
   export LIST_FILES=" \
   nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
   nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
   nmmb_rst_01_bin_0012h_00m_00.00s nmmb_rst_01_nio_0012h_00m_00.00s \
   nmmb_hst_02_bin_0000h_00m_00.00s nmmb_hst_02_bin_0024h_00m_00.00s \
   nmmb_hst_02_nio_0000h_00m_00.00s nmmb_hst_02_nio_0024h_00m_00.00s \
   nmmb_rst_02_bin_0012h_00m_00.00s nmmb_rst_02_nio_0012h_00m_00.00s \
   nmmb_hst_03_bin_0000h_00m_00.00s nmmb_hst_03_bin_0024h_00m_00.00s \
   nmmb_hst_03_nio_0000h_00m_00.00s nmmb_hst_03_nio_0024h_00m_00.00s \
   nmmb_rst_03_bin_0012h_00m_00.00s nmmb_rst_03_nio_0012h_00m_00.00s \
   nmmb_hst_04_bin_0000h_00m_00.00s nmmb_hst_04_bin_0024h_00m_00.00s \
   nmmb_hst_04_nio_0000h_00m_00.00s nmmb_hst_04_nio_0024h_00m_00.00s \
   nmmb_rst_04_bin_0012h_00m_00.00s nmmb_rst_04_nio_0012h_00m_00.00s"
#---------------------
   export_nmm
   export GBRG=mnests_2way ; export FCSTL=24 ; export NCHILD=02
   export NEMSI=true  ; export WLCLK=15 ; export NODE=3
   export AFFN=cpu    ; export MODE=2-way
   export TASKS=$TASKS_mvg2 ; export TPN=$TPN_mvg2
   export INPES=$INPES_mvg2 ; export JNPES=$JNPES_mvg2 ; export WTPG=$WTPG_mvg2
   export WGT=1.0
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

####################################################################################################
#
# TEST   - NMM-B moving nests: (RESTART) Use generational task assignments and 2-way exchange.
#        - Compute tasks - Upper parent 5x18 | Child #1 5x9 | Child #2 5x9 | Grandchild 10x9
#        - 1 thread / opnl physics / free fcst / nemsio and pure binary input
#
####################################################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test NMMB-regional with 2-way moving nests - RESTART"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/NMM_2way_nests_restart
   export CNTL_DIR=NMMB_2way_nests
   export LIST_FILES=" \
   nmmb_hst_01_bin_0024h_00m_00.00s \
   nmmb_hst_01_nio_0024h_00m_00.00s \
   nmmb_hst_02_bin_0024h_00m_00.00s \
   nmmb_hst_02_nio_0024h_00m_00.00s \
   nmmb_hst_03_bin_0024h_00m_00.00s \
   nmmb_hst_03_nio_0024h_00m_00.00s \
   nmmb_hst_04_nio_0024h_00m_00.00s"
#---------------------
   export_nmm
   export GBRG=mnests_2way ; export FCSTL=24 ; export NCHILD=02
   export NEMSI=true  ; export WLCLK=15 ; export NODE=3
   export AFFN=cpu    ; export MODE=2-way
   export TASKS=$TASKS_mvg2 ; export TPN=$TPN_mvg2
   export INPES=$INPES_mvg2 ; export JNPES=$JNPES_mvg2 ; export WTPG=$WTPG_mvg2
   export WGT=1.0 ; export RSTRT=true
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

fi # end of the loop SKIP_NMM

if [ ${SKIP_GFS:-NO} = YES ] ; then
 echo "Skipping GFS tests"
else

  if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ]; then
   cp ../../exe/NEMS.x_630r_gsm ../../exe/NEMS.x
  fi

 ###############################################################################
 #
 # TEST   - GFS 
 #        - 30 compute tasks / 1 thread 
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ]; then

  export TEST_DESCR="Compare GFS results with previous trunk version"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_32
  export CNTL_DIR=GFS_NODFI
  export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
  export_gsm
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS  adiabatic run
 #        - 30 compute tasks / 1 thread
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ]; then

  export TEST_DESCR="Compare GFS adiabatic results with previous trunk version"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_32_ADIAB
  export CNTL_DIR=GFS_ADIAB
  export LIST_FILES=" sigf03 sigf06 sigf12 sigf24 "
#---------------------
  export_gsm
  export NDAYS=1 ; export ADIAB=.true.
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS as two copies
 #        - 30 compute tasks / 1 thread  2 copy
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test GFS with 2-copy option"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_32_48
  export CNTL_DIR=GFS_NODFI
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	flxf03 flxf06 flxf12 flxf24"
#---------------------
  export_gsm
  export NDAYS=1 ; export CP2=.true.
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS with different decomposition
 #        - 58 compute tasks / 1 thread  restart
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test GFS different decomposition and restart"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_32_48
  export CNTL_DIR=GFS_NODFI
# For this test, all sig and sfc outputs and flx03, flx06, even the flxf48 are OK, only flxf12
# and flxf24 are not OK.  Skip the check of flx12 and flx24, and will fix it.
#---------------------------------------------------------------------------------------------
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf03 flxf06 flxf48"
#       flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
  export_gsm
  export TASKS=48 ; export PE1=46 ; export WLCLK=80
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS with multiple threads
 #        - 12 compute tasks / 2 threads / 2WrtGrp & 2WrtPePerGrp
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="Test GFS threads"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_16_32
  export CNTL_DIR=GFS_NODFI
# For this test, all sig and sfc outputs and flx06 are OK, only flxf03 , flxf12
# and flxf24 are not OK.  Skip the check of flxf03, flx12 and flx24, and will fix it.
#------------------------------------------------------------------------------------
  export LIST_FILES=" \
       sigf03 sigf06 sigf12 sigf24 \
       sfcf03 sfcf06 sfcf12 sfcf24 \
       flxf06"
#       flxf03 flxf06 flxf12 flxf24"
#---------------------
  export_gsm
  export TASKS=16 ; export PE1=12 ; export THRD=2 ; export TPN=$TPN_thrd
  export WRTGP=1  ; export NDAYS=1 ; export WTPG=1
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
   unset TPN
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS with multiple tasks, no quilting, and frequent output
 #        - 32 tasks / 1 thread
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="GFS, 32 proc, 1 thread, no quilt, output every 4 timestep"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_16_32
  export CNTL_DIR=GFS_NODFI
  export LIST_FILES=" \
        sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
  export_gsm
  export NSOUT=4 ; export QUILT=.false.
  export PE1=32  ; export WTPG=1 ; export WLCLK=80 ; export WRTGP=1
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS on a single processor
 #        - 1 task / 1 thread
 #
 ###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $RT_FULL = true ]; then

   export TEST_DESCR="Test GFS single processor"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_01_NSOUT
   export CNTL_DIR=GFS_NODFI
   export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	flxf03 flxf06 flxf12 flxf24"
#---------------------
   export_gsm
   export TASKS=1 ; export PE1=1 ; export WTPG=1 ; export WRTGP=1
   export QUILT=.false. ; export NDAYS=1 ; export WLCLK=80
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test

 ###############################################################################
 #
 # TEST   - GFS on a single processor with no quilting
 #        - 1 task / 1 thread
 #
 ###############################################################################

  if [ $RT_FULL = true ]; then

   export TEST_DESCR="Test GFS, 1 proc, 1 thread, no quilting,nsout=1"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_01_NSOUT
   export CNTL_DIR=GFS_NODFI
   export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export TASKS=1 ; export PE1=1 ; export WTPG=1 ; export WRTGP=1
   export NSOUT=1 ; export WLCLK=80
   export QUILT=.false.
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine

 ###############################################################################
 #
 # TEST   - GFS with multiple threads, no quilting, and frequent output
 #        - 16 tasks / 2 threads
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test GFS, 16 proc, 2 threads,no quilt, output every 2 time steps"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_16_48_NOQUILT_NSOUT
  export CNTL_DIR=GFS_NODFI
# For this test, all sig and sfc outputs and flx06 are OK, only flxf03 , flxf12
# and flxf24 are not OK.  Skip the check of flxf03, flx12 and flx24, and will fix it.
#------------------------------------------------------------------------------------
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	flxf06"
#	flxf03 flxf06 flxf12 flxf24"
#---------------------
  export_gsm
  export TASKS=16 ; export PE1=16  ; export WTPG=1 ; export WRTGP=1
  export THRD=2   ; export NSOUT=2 ; export NDAYS=1
  export QUILT=.false.
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS with multiple tasks and no quilting
 #        - 48 tasks / 1 thread
 #
 ###############################################################################

 if [ $RT_FULL = true ]; then

  export TEST_DESCR="Test GFS, 48 proc, 1 thread, no quilt"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_16_48_NOQUILT_NSOUT
  export CNTL_DIR=GFS_NODFI
# For this test, all sig and sfc outputs and flx03, flx06, even the flxf48 are OK, only flxf12
# and flxf24 are not OK.  Skip the check of flx12 and flx24, and will fix it.
#---------------------------------------------------------------------------------------------
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf03 flxf06 flxf48"
#	flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
  export_gsm
  export TASKS=48 ; export PE1=46 ; export WTPG=1 ; export WRTGP=1
  export NSOUT=1  ; export QUILT=.false. ; export WLCLK=40
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS digital filter
 #        - 30 compute tasks / 1 thread
 #
 ###############################################################################

 if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ]; then

  export TEST_DESCR="GFS,32 total proc (tasks), 1 thread, quilt, digital filter on reduced grid"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_32_16_dfi
  export CNTL_DIR=GFS_DFI_REDUCEDGRID
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf03 flxf06 flxf12 flxf24 flxf48" 
#---------------------
  export_gsm
  export FDFI=3
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS digital filter
 #        - 12 compute tasks / 2 thread ,2 WrtGrp x 2 WrtPePerGrp
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true ]; then

  export TEST_DESCR="GFS,16 total proc (tasks), 2 thread, quilt,2x2 wrt pe, digital filter on reduced grid"

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GFS_16_1_dfi
  export CNTL_DIR=GFS_DFI_REDUCEDGRID
# For this test, all sig and sfc outputs are OK, but flux files are not OK.
# Skip the check of flux files, and will fix it.
#--------------------------------------------------------------------------
  export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	"
#	flxf03 flxf06 flxf12 flxf24"
#---------------------
  export_gsm
  export TASKS=16 ; export PE1=12 ; export WRTGP=1 ; export WTPG=1 ; export THRD=2
  export NDAYS=1  ; export FDFI=3 ; export CP2=.true. ; export WTPG=1
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS digital filter
 #        - 1pe nsout=0
 #
 ###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $RT_FULL = true ]; then

   export TEST_DESCR="GFS,1 proc, no quilt, digital filter on reduced grid"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_16_1_dfi
   export CNTL_DIR=GFS_DFI_REDUCEDGRID
   export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export TASKS=1 ; export PE1=1    ; export WTPG=1 ; export WRTGP=1
   export FDFI=3  ; export WLCLK=40 ; export QUILT=.false.
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi  # endif machine

 ###############################################################################
 #
 # TEST   - GFS
 #        - OPAC aerosols
 #
 ###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ]; then

   export TEST_DESCR="GFS, use the OPAC climo scheme for SW and LW"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_OPAC
   export CNTL_DIR=GFS_OPAC
   export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	flxf03 flxf06 flxf12 flxf24"
#---------------------
   export_gsm
   export IAER=11 ; export NDAYS=1
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi  # endif machine

 #
 ###############################################################################
 #
 # TEST   - GFS hyb 2 loop with digital filter
 #        - 12 compute tasks / 2 thread ,2 WrtGrp x 2 WrtPePerGrp
 #
 ###############################################################################

 if [ $MACHINE_ID = wcoss ]; then
  if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ]; then

   export TEST_DESCR="GFS,16 total proc (tasks), 2 thread, quilt,2x2 wrt pe, HYB 2loop digital filter on reduced grid"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_hyb_2loop
   export CNTL_DIR=GFS_DFI_hyb_2loop
   export LIST_FILES=" \
	sigf03 sigf06 sigf12 sigf24 \
	sfcf03 sfcf06 sfcf12 sfcf24 \
	flxf03 flxf06 flxf12 flxf24"
#---------------------
   export_gsm
   export TASKS=16 ; export PE1=12 ; export WRTGP=1 ; export WTPG=1 ; export THRD=2
   export FDFI=3   ; export CP2=.true.
   export IDVC=2   ; export THERMODYN_ID=0  ; export SFCPRESS_ID=0 ; export SPECTRALLOOP=2
   export NDAYS=1
   export TPN=8
#  export NEMSIOIN=.true. ; export NEMSIOOUT=.true.
#  export CDATE=2010010100
#  if [ $NEMSIOIN = .true. ] ; then
#   export IDVC=3      ; export THERMODYN_ID=3  ; export SFCPRESS_ID=2
#   export SPECTRALLOOP=1
#   export IC_DIR=${DISKNM}/noscrub/wx20rv/REGRESSION_TEST/GFS_DFI_REDUCEDGRID_HYB/
#  fi
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
   export TPN=
#---------------------

  fi # endif test
 fi # endif machine (only WCOSS)

 ###############################################################################
 #
 #
 # TEST   - GFS hyb 2 loop with digital filter restart
 #        - 12 compute tasks / 2 thread ,2 WrtGrp x 2 WrtPePerGrp
 #
 ###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $RT_FULL = true ]; then
 
   export TEST_DESCR="GFS,16 total proc (tasks), 2 thread, quilt,2x2 wrt pe, HYB 2loop digital filter on reduced grid, restart"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_hyb_2loop
   export CNTL_DIR=GFS_DFI_hyb_2loop
   export LIST_FILES=" \
        sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export TASKS=16 ; export PE1=12 ; export WRTGP=1 ; export WTPG=1 ; export THRD=2
   export FDFI=3   ; export CP2=.true.
   export IDVC=2   ; export THERMODYN_ID=0  ; export SFCPRESS_ID=0 ; export SPECTRALLOOP=2
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine

 if [ ${SKIP_NST:-NO} = YES ] ; then
  echo "Skipping GFS NST option"
 else
 ###############################################################################
 #
 # TEST   - GFS hyb 2 loop with digital filter, with nst
 #        - 12 compute tasks / 2 thread ,2 WrtGrp x 2 WrtPePerGrp
 #
 ###############################################################################

  if [ $MACHINE_ID = ccs ]; then
   if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

    export TEST_DESCR="GFS,16 total proc (tasks), 2 thread, quilt,2x2 wrt pe, HYB 2loop digital filter on reduced grid with nst"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_hyb_2loop_nst
    export CNTL_DIR=GFS_DFI_hyb_2loop_nst
    export LIST_FILES=" \
        sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf03 flxf06 flxf12 flxf24 flxf48 \
        nstf03 nstf06 nstf12 nstf24 nstf48"
#---------------------
    export_gsm
    export TASKS=16 ; export PE1=12 ; export THRD=2 ; export WRTGP=1 ; export WTPG=1
    export FDFI=3   ; export NST_FCST=1 ; export CP2=.true.
    export IDVC=2   ; export THERMODYN_ID=0  ; export SFCPRESS_ID=0 ; export SPECTRALLOOP=2
#---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
#---------------------

   fi # endif test
  fi  # endif machine
 fi   # SKIP_NST test

 ###############################################################################
 #
 # TEST   - GFS digital filter  HYb 1loop
 #        - 12 compute tasks / 2 thread ,2 WrtGrp x 2 WrtPePerGrp
 #
 ###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

   export TEST_DESCR="GFS,16 total proc (tasks), 2 thread, quilt,2x2 wrt pe, HYB 1loop digital filter on reduced grid"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_16_dfi_hyb_1loop
   export CNTL_DIR=GFS_DFI_REDUCEDGRID_HYB
   export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export TASKS=16 ; export PE1=12 ; export THRD=2 ; export WRTGP=1 ; export WTPG=1
   export FDFI=3 ; export CP2=.true.
   export IDVC=2 ; export THERMODYN_ID=0  ; export SFCPRESS_ID=0 ; export SPECTRALLOOP=1
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi  # endif machine

 ###############################################################################
 #
 # TEST   - WAM enthalpy on general hybrid 2loop 150levels
 #        - 32 compute tasks / 1 thread ,no quilting
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

   export TEST_DESCR="WAM enthalpy on general hybrid 2loop 150levels,32 compute tasks / 1 thread ,no quilting"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/WAM_gh_l150
   export CNTL_DIR=WAM_gh_l150
   export LIST_FILES=" \
        sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export CDATE=2011092300 ; export WLCLK=90
   export TASKS=32 ; export PE1=32 ; export THRD=1 ; export QUILT=.false.
   export FDFI=3 ; export CP2=.false. ; export IDEA=.true.
   export IDVC=3 ; export THERMODYN_ID=3  ; export SFCPRESS_ID=2 ; export SPECTRALLOOP=2
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test


 ###############################################################################
 #
 # TEST   - WAM enthalpy on general hybrid 2loop 150levels with NDSL
 #          non-iteration dimensional-split semi-Lagrangian advection
 #        - 32 compute tasks / 1 thread ,no quilting
 #
 ###############################################################################

 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

   export TEST_DESCR="WAM enthalpy on general hybrid 2loop 150levels,32 compute tasks / 1 thread ,no quilting with NDSL (non-iteration dimension-split semi-Lagragian advection) "

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/WAM_gh_l150_NDSL
   export CNTL_DIR=WAM_gh_l150_NDSL
   export LIST_FILES=" \
        sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
   export CDATE=2011092300 ; export WLCLK=90; export NDSLFV=.true.
   export TASKS=32 ; export PE1=32 ; export THRD=1 ; export QUILT=.false.
   export FDFI=3 ; export CP2=.false. ; export IDEA=.true.
   export IDVC=3 ; export THERMODYN_ID=3  ; export SFCPRESS_ID=2 ; export SPECTRALLOOP=2
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

 ###############################################################################
 #
 # TEST   - GFS_nemsio
 #
 ###############################################################################

 if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ] ; then
   if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

    export TEST_DESCR="GFS with NEMSIO"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_DFI_NEMSIO
    export CNTL_DIR=GFS_DFI_NEMSIO
    export LIST_FILES=" \
         sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
         sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
         flxf00 flxf03 flxf06 flxf12 flxf24 flxf48 "
#---------------------
    export_gsm
#
    export FDFI=3
    export QUILT=.true.
    export NEMSIOIN=.true. ; export SIGIOIN=.false.
    export NEMSIOOUT=.true.; export SIGIOOUT=.false.; export SFCIOOUT=.false.
    export CDATE=2010010100
    export SIGHDR=$NEMSIOGET
    export WTPG=4
#---------------------
    ./rt_gfs.sh
#    if [ $? = 2 ]; then exit ; fi
#---------------------

   fi # endif test
 fi  # endif machine

 ###############################################################################
 #
 # TEST   - GFS_GOCART_NEMSIO
 #
 ###############################################################################

# Temporarily skip the wcoss run. WY.
# #----------------------------------
 if [ $MACHINE_ID = zeus ]; then
# if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ] ; then
   if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

  if [ $MACHINE_ID = zeus ]; then
   cp ../../exe/NEMS.x_310r_nmm ../../exe/NEMS.x
  fi
    export TEST_DESCR="GFS_GOCART with NEMSIO"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_GOCART_NEMSIO
    export CNTL_DIR=GFS_GOCART_NEMSIO
    export LIST_FILES=" \
         ngac.t00z.sigf00 ngac.t00z.sigf03 ngac.t00z.sigf06 ngac.t00z.sigf12 ngac.t00z.sigf24 \
         ngac.t00z.sfcf00 ngac.t00z.sfcf03 ngac.t00z.sfcf06 ngac.t00z.sfcf12 ngac.t00z.sfcf24 \
         ngac.t00z.flxf00 ngac.t00z.flxf03 ngac.t00z.flxf06 ngac.t00z.flxf12 ngac.t00z.flxf24 \
         ngac.t00z.aerf00 ngac.t00z.aerf03 ngac.t00z.aerf06 ngac.t00z.aerf12 ngac.t00z.aerf24 "
#---------------------
    export_gsm
    export TASKS=64; export PE1=64
    export QUILT=.true.
    export NEMSIOIN=.true. ;  export SIGIOIN=.false.
    export NEMSIOOUT=.true.; export SIGIOOUT=.false.; export SFCIOOUT=.false.
    export CDATE=2012071700
    export SIGHDR=$NEMSIOGET
    export WTPG=4
#---------------------
    ./rt_gocart.sh
    if [ $? = 2 ]; then exit ; fi
#---------------------
  if [ $MACHINE_ID = zeus ]; then
   cp ../../exe/NEMS.x_630r_gsm ../../exe/NEMS.x
  fi

   fi # endif test
 fi  # endif machine
 
###############################################################################
#
# TEST   - GFS Semi-Lagrangian model
#        - 96 tasks, T574L64, 24 hours forecast. Adiabatic version.
#        - No digital filter.
#
###############################################################################

if [ $MACHINE_ID = wcoss ]; then
 if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

 export TEST_DESCR="Run Semi-lagrangian test"
  (( TEST_NR=TEST_NR+1 ))

#---------------------
 export_gsm
#---------------------
 export CDATE=2013010100
 export LDFI_SPECT=.false.
 export NDAYS=1
 export wave=574
 export TASKS=96
 export TPN=8
 export THRD=1
 export ADIAB=.true.
 export IAER=111
 export LD_PRELOAD=/nems/save/Weiyu.Yang/libmpitrace.so
 export RUNDIR=${RUNDIR_ROOT}/GFS_slg
 export WLCLK=55
 export SLG=.true.
 export PE1=96
 export NEMSIOIN=.false.
 export NEMSIOOUT=.false.
 export SIGIOIN=.true.
 export SIGIOOUT=.true.
 export SFCIOOUT=.true.
 export WTPG=1
 export WRTGP=1
 export WRITE_DOPOST=.false.
 export POST_GRIBVERSION='"grib1"'
 export GOCART_AER2POST=.false.
 export NSOUT=36
 export QUILT=.true.
 export MEMBER_NAMES=c00
 export CP2=1 # one copy in the dynamics and physics, and another one popints the copy.
 export FDFI=0 # no digital filter.
 export FHRES=264
 export REDUCEDGRID=.true.
 export NST_FCST=0
 export GOCART=0
 export TRACER=.false.
 export SFCPRESS_ID=1
 export THERMODYN_ID=1
 export IDVC=2  # the vertical coord - 2 means hybrid
 export NDSLFV=.false.
 export SPECTRALLOOP=3
 export IEMS=0
 export ISOL=1
 export ICO2=1
 export CNTL_DIR=GFS_SLG_adiab
 export LIST_FILES=" \
        sigf00 sigf06 sigf12 sigf18 sigf24 "
  ./rt_gfs.sh_slg
 export SLG=.false.
  if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test
fi #for only wcoss.

###############################################################################
#
# TEST   - GFS Semi-Lagrangian model
#        - 96 tasks, T574L64, 24 hours forecast. Adiabatic version.
#        - With digital filter.
#
###############################################################################

if [ $MACHINE_ID = wcoss ]; then
 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

 export TEST_DESCR="Run Semi-lagrangian test with digital filter"
  (( TEST_NR=TEST_NR+1 ))

#---------------------
 export_gsm
#---------------------
 export CDATE=2013010100
 export LDFI_SPECT=.true.
 export NDAYS=1
 export wave=574
 export TASKS=96
 export TPN=8
 export THRD=1
 export ADIAB=.true.
 export IAER=111
 export LD_PRELOAD=/nems/save/Weiyu.Yang/libmpitrace.so
 export RUNDIR=${RUNDIR_ROOT}/GFS_slg_DFI
 export WLCLK=55
 export SLG=.true.
 export PE1=96
 export NEMSIOIN=.false.
 export NEMSIOOUT=.false.
 export SIGIOIN=.true.
 export SIGIOOUT=.true.
 export SFCIOOUT=.true.
 export WTPG=1
 export WRTGP=1
 export WRITE_DOPOST=.false.
 export POST_GRIBVERSION='"grib1"'
 export GOCART_AER2POST=.false.
 export NSOUT=36
 export QUILT=.true.
 export MEMBER_NAMES=c00
 export CP2=1 # one copy in the dynamics and physics, and another one popints the copy.
 export FDFI=3
 export FHRES=264
 export REDUCEDGRID=.true.
 export NST_FCST=0
 export GOCART=0
 export TRACER=.false.
 export SFCPRESS_ID=1
 export THERMODYN_ID=1
 export IDVC=2  # the vertical coord - 2 means hybrid
 export NDSLFV=.false.
 export SPECTRALLOOP=3
 export IEMS=0
 export ISOL=1
 export ICO2=1
 export CNTL_DIR=GFS_SLG_adiab_DFI
 export LIST_FILES=" \
        sigf00 sigf06 sigf12 sigf18 sigf24 "
  ./rt_gfs.sh_slg
 export SLG=.false.
  if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test
fi #for only wcoss.

fi   # end of SKIP_GFS test


if [ ${SKIP_GENS:-NO} = YES ] ; then
 echo 'Skipping the global ensemble tests'
else
 ###############################################################################
 #
 # TEST   - Concurrency GEFS
 #        - 4 members, every 6 hours, couple and add stochastic perturbations, T190L28.
 #
 ###############################################################################
 if [ $ST_test = true -o $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

  export TEST_DESCR="Concurrency GEFS, stochastic perturbations, 4 members, T190L28."

#---------------------
  (( TEST_NR=TEST_NR+1 ))
  export RUNDIR=${RUNDIR_ROOT}/GEFS_Concurrency_Run
  export CNTL_DIR=GEFS_m4
  export LIST_FILES=" \
       SIG.F06_01 SIG.F06_02 SIG.F06_03 SIG.F06_04 \
       SFC.F06_01 SFC.F06_02 SFC.F06_03 SFC.F06_04 \
       FLX.F06_01 FLX.F06_02 FLX.F06_03 FLX.F06_04"
#---------------------
  export_gsm
  export GEFS_ENSEMBLE=1
  export TASKS=64 ; export WLCLK=20
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

 fi # endif test

###############################################################################
#
# TEST   - GEN, 16 PEs, 1 node.
#        - 1 members.
#
###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $ST_test = true -o $RT_FULL = true ]; then

   export TEST_DESCR="GEN, 1 members."

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GEN_Run_m1
#---------------------
   export_common
   export TASKS=16 ; export WLCLK=02
#---------------------
   ./rt_gen.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine

###############################################################################
#
# TEST   - Concurrency GEN, 64PEs, 1 node.
#        - 4 members.
#
###############################################################################

 if [ $MACHINE_ID = ccs ]; then
  if [ $RT_FULL = true ]; then

   export TEST_DESCR="Concurrency GEN, 4 members."

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GEN_Concurrency_Run_m4
#---------------------
   export_common
   export GEN_ENSEMBLE=1
   export TASKS=64 ; export WLCLK=02
#---------------------
   ./rt_gen.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi  # endif machine
fi   # SKIP_GENS test

if [ ${SKIP_FIM:-NO} = YES ] ; then
 echo "Skipping FIM regression tests"
else
 #########################################################################
 # Clean and compile only FIM core
 #########################################################################

  if [ $RT_FULL = true -o $CB_arg = fim -o $CB_arg = all ]; then

   echo "Preparing model code for regression tests"
   echo "Compilation only FIM"
   printf %s "Compiling model code (this will take some time)......."
   cd ${PATHTR}/src

   date                                     >> ${REGRESSIONTEST_LOG}
   echo "Compilation only FIM"              >> ${REGRESSIONTEST_LOG}
   rm -f ${PATHTR}/exe/NEMS.x
   gmake clean                              >> ${COMPILE_LOG} 2>&1
   esmf_version 3                           >> ${COMPILE_LOG} 2>&1
   gmake fim                                >> ${COMPILE_LOG} 2>&1
   date                                     >> ${REGRESSIONTEST_LOG}

   if [ -f ${PATHTR}/exe/NEMS.x ] ; then
    echo "   Model code Compiled";echo;echo
   else
    echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
    echo "   Model code is NOT compiled"
    exit
   fi

  fi # endif compilation

 cd $PATHRT

 #############################################################################
 #
 # TEST   - FIM
 #        - 40 compute tasks / 1 thread, 1 node.  
 #
 #############################################################################

  if [ $RT_FULL = true -o $CB_arg = fim -o $CB_arg = all ]; then

   export TEST_DESCR="Compare FIM results with previous trunk version, only FIM compiled"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export TASKS=40
   export GLVL=4
   export RUNDIR=${RUNDIR_ROOT}/FIM_G${GLVL}L38P${TASKS}_24hr
   export CNTL_DIR=FIM_G${GLVL}L38_24hr
   export LIST_FILES=" \
        fim_out_2D__000000hr fim_out_2D__000003hr fim_out_2D__000006hr \
        fim_out_2D__000009hr fim_out_2D__000012hr fim_out_2D__000015hr \
        fim_out_2D__000018hr fim_out_2D__000021hr fim_out_2D__000024hr \
        fim_out_da3D000024hr fim_out_db3D000024hr fim_out_dp3D000024hr \
        fim_out_hgtP000024hr fim_out_mp3D000024hr fim_out_oz3D000024hr \
        fim_out_ph3D000024hr fim_out_pr3D000024hr fim_out_qv3D000024hr \
        fim_out_qw3D000024hr fim_out_rh3D000024hr fim_out_rp3P000024hr \
        fim_out_td3D000024hr fim_out_th3D000024hr fim_out_tk3D000024hr \
        fim_out_tmpP000024hr fim_out_up3P000024hr fim_out_us3D000024hr \
        fim_out_vo3D000024hr fim_out_vp3P000024hr fim_out_vs3D000024hr \
        fim_out_ws3D000024hr"
#---------------------
   export_fim
   export WLCLK=15
#---------------------
   ./rt_fim.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
fi   # SKIP_FIM test

if [ ${SKIP_POST:-NO} = YES ] ; then
 echo "Skipping NMMB & GFS tests with ESMF3.1.0rp5 and POST library"
else

 cd $PATHRT

###############################################################################
# Clean and compile both NMMB & GFS cores, using ESMF 3.1.0r series and POST library.
###############################################################################

 if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ]; then
  if [ $RT_FULL = true -o $CB_arg = post -o $CB_arg = nmm -o $CB_arg = gfs -o $CB_arg = all ] ; then

   echo "Preparing model code for regression tests"
   echo "Compilation with POST"
   printf %s "Using the ESMF 3.1.0r series and POST library.   "
   printf %s "Compiling model code (this will take some time)......."
   cd ${PATHTR}/src

   date                                     >> ${REGRESSIONTEST_LOG}
   echo "Compilation with POST"             >> ${REGRESSIONTEST_LOG}
   rm -f ${PATHTR}/exe/NEMS.x

   if [ $MACHINE_ID = wcoss ]; then
    ./esmf_version 3_wcoss                 >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm_gen_post GOCART_MODE=full     >> ${COMPILE_LOG} 2>&1

   elif [ $MACHINE_ID = zeus ]; then
    ./esmf_version 3_zeus                  >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm_gen_post GOCART_MODE=full     >> ${COMPILE_LOG} 2>&1
   fi

   date                                     >> ${REGRESSIONTEST_LOG}

   if [ -f ${PATHTR}/exe/NEMS.x ] ; then
    echo "   Model code Compiled";echo;echo
   else
    echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
    echo "   Model code is NOT compiled"
    exit
   fi
  fi # endif compilation
 fi # endif machine 

 cd $PATHRT

 ###############################################################################
 #
 # TEST   - Regional NMM-B with pure binary input and post
 #        - 6x5 compute tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $MACHINE_ID = wcoss ]; then
  if [ $RT_FULL = true -o $CB_arg = post -o $CB_arg = nmm -o $CB_arg = all ] ; then

   export TEST_DESCR="NMMB-regional run with post on quilt"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/NMM_reg_post
   export CNTL_DIR=NMMB_reg_post
   export LIST_FILES=" \
   nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
   nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
   nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s \
   BGDAWP.GrbF48 BGRD3D.GrbF48 BGRDSF.GrbF48"
#---------------------
   export_nmm
   export GBRG=reg ; export WPREC=true
   export WRITE_DOPOST=.true.
#---------------------
    ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine

 if [ ${SKIP_GFS_POST:-NO} = YES ] ; then
  echo "Skipping GFS and NGAC post tests"
 else
 ###############################################################################
 #
 # TEST   - GFS_post
 #        - 30 compute tasks / 1 thread
 #
 ###############################################################################

  if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ]; then
   if [ $RT_FULL = true -o $CB_arg = post -o $CB_arg = gfs -o $CB_arg = all ] ; then

    export TEST_DESCR="GFS with POST"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_DFI_POST
    export CNTL_DIR=GFS_DFI_POST
    export LIST_FILES=" \
         sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
         sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
         flxf00 flxf03 flxf06 flxf12 flxf24 flxf48 "
#---------------------
    export_gsm
#
    export LDFI_SPECT=.false.
    export FDFI=3
    export QUILT=.true.; export WRITE_DOPOST=.true.
    export NEMSIOIN=.true. ; export SIGIOIN=.false.
    export NEMSIOOUT=.true.; export SIGIOOUT=.false.; export SFCIOOUT=.false.
    export CDATE=2010010100
    export SIGHDR=$NEMSIOGET
    export WTPG=4
#---------------------
    ./rt_gfs.sh
#    if [ $? = 2 ]; then exit ; fi
#---------------------

   fi # endif test
  fi  # endif machine

 ###############################################################################
 #
 # TEST   - GFS_GOCART_POST
 #        - 64 compute tasks / 1 thread
 #
 ###############################################################################

# Temporarily skip the wcoss run. WY.
# #----------------------------------
  if [ $MACHINE_ID = zeus ]; then
#  if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ]; then
   if [ $RT_FULL = true -o $CB_arg = post -o $CB_arg = gfs -o $CB_arg = all ] ; then

    export TEST_DESCR="GFS_GOCART with POST"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GFS_GOCART_POST
    export CNTL_DIR=GFS_GOCART_POST
    export LIST_FILES=" \
         ngac.t00z.sigf00 ngac.t00z.sigf03 ngac.t00z.sigf06 ngac.t00z.sigf12 ngac.t00z.sigf24 \
         ngac.t00z.sfcf00 ngac.t00z.sfcf03 ngac.t00z.sfcf06 ngac.t00z.sfcf12 ngac.t00z.sfcf24 \
         ngac.t00z.flxf00 ngac.t00z.flxf03 ngac.t00z.flxf06 ngac.t00z.flxf12 ngac.t00z.flxf24 \
         ngac.t00z.aerf00 ngac.t00z.aerf03 ngac.t00z.aerf06 ngac.t00z.aerf12 ngac.t00z.aerf24 \
         NGAC2d.GrbF03 NGAC2d.GrbF06 NGAC2d.GrbF12  NGAC2d.GrbF24 \
         NGAC3d.GrbF03 NGAC3d.GrbF06 NGAC3d.GrbF12 NGAC3d.GrbF24"
#---------------------
    export_gsm
    export TASKS=64; export PE1=64
    export QUILT=.true.; export WRITE_DOPOST=.true.
    export NEMSIOIN=.true. ;  export SIGIOIN=.false.
    export NEMSIOOUT=.true.; export SIGIOOUT=.false.; export SFCIOOUT=.false.
    export CDATE=2012071700
    export SIGHDR=$NEMSIOGET
    export WTPG=4
#---------------------
    ./rt_gocart.sh
    if [ $? = 2 ]; then exit ; fi
#---------------------

   fi # endif test
  fi  # endif machine
 fi  # SKIP_GFS_POST

fi   # SKIP_POST test

if [ ${SKIP_ESMF520rAPI:-NO} = YES ] ; then
 echo "Skipping NMMB and GFS tests using ESMF 5.2.0r API"
else
 #########################################################################
 # Clean and compile both NMMB & GFS cores, using ESMF 5.2.0r API.
 #########################################################################

 if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = gfs -o $CB_arg = all ] ; then

  if [ ${COMPILE_SORC_520rAPI:-YES} = YES ] ; then
  
  echo "Preparing model code for regression tests"
  echo "Using the ESMF 5.2.0r API"
  printf %s "Using the ESMF 5.2.0r API.   "
  
  printf %s "Compiling model code (this will take some time)......."
  cd ${PATHTR}/src

  date                                     >> ${REGRESSIONTEST_LOG}
  echo "Compilation ESMF 5.2.0r API"       >> ${REGRESSIONTEST_LOG}
  rm -f ${PATHTR}/exe/NEMS.x
  if [ $MACHINE_ID = wcoss ]; then

    ./esmf_version 5.2_wcoss               >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm                          >> ${COMPILE_LOG} 2>&1

  elif [ $MACHINE_ID = gaea -o $MACHINE_ID = zeus ]; then

    ./esmf_version 5.2.0rAPI_zeus          >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm                          >> ${COMPILE_LOG} 2>&1

   fi
   date                                     >> ${REGRESSIONTEST_LOG}

  fi # endif compilation
  fi # endif skipping compilation

  cd $PATHRT

 ###############################################################################
 #
 # TEST   - Global NMM-B with pure binary input
 #        - 6x5 compute  tasks / 1 thread / opnl physics / free fcst / pure binary input
 #
 ###############################################################################

 if [ $MACHINE_ID = wcoss -o $MACHINE_ID = zeus ] ; then
  if [ $RT_FULL = true -o $CB_arg = nmm -o $CB_arg = all ] ; then

   export TEST_DESCR="Compare NMMB-global results with previous trunk
   version_ESMF_5.2.0r API"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/NMM_CNTRL_ESMF_5.2.0rAPI
   export CNTL_DIR=NMMB_glob_ESMF_5.2.0rAPI
   export LIST_FILES=" \
   nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s nmmb_hst_01_bin_0048h_00m_00.00s \
   nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s nmmb_hst_01_nio_0048h_00m_00.00s \
   nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s"
#---------------------
   export_nmm
   export GBRG=glob
#---------------------
   ./rt_nmm.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine (only WCOSS)

 ###############################################################################
 # 
 # TEST   - GFS 
 #        - 30 compute tasks / 1 thread 
 #
 ###############################################################################

 if [ $MACHINE_ID = zeus ] ; then
  if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

   export TEST_DESCR="Compare GFS results with previous trunk version
   ESMF5.2.0rAPI"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_32_ESMF5.2.0rAPI
   export CNTL_DIR=GFS_NODFI
   export LIST_FILES=" \
	sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
	sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
	flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test
 fi # endif machine (only zeus)


 if [ ${SKIP_GEFS_CONCUR:-NO} = YES ] ; then
   echo "Skipping GEFS Concurrency test for ESMF520r API"
 else

 ###############################################################################
 #
 # TEST   - Concurrency GEFS
 #        - 4 members, every 6 hours, couple and add stochastic perturbations, T190L28.
 #
 ###############################################################################

  if [ $MACHINE_ID = zeus ] ; then
   if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

    export TEST_DESCR="Concurrency GEFS, stochastic perturbations, 4 members,
    T190L28. ESMF5.2.0r API"

#---------------------
    (( TEST_NR=TEST_NR+1 ))
    export RUNDIR=${RUNDIR_ROOT}/GEFS_Concurrency_Run_ESMF5.2.0rAPI
    export CNTL_DIR=GEFS_m4_ESMF5.2.0rAPI
    export LIST_FILES=" \
         SIG.F06_01 SIG.F06_02 SIG.F06_03 SIG.F06_04 \
         SFC.F06_01 SFC.F06_02 SFC.F06_03 SFC.F06_04 \
         FLX.F06_01 FLX.F06_02 FLX.F06_03 FLX.F06_04"
#---------------------
    export_gsm
    export GEFS_ENSEMBLE=1
    export TASKS=64 ; export WLCLK=40
#---------------------
    ./rt_gfs.sh
    if [ $? = 2 ]; then exit ; fi
#---------------------

   fi # endif test
  fi # endif machine (only zeus)
 fi   # SKIP_GENS_CONCUR test
fi   # SKIP_ESMF520rAPI test


# On zeus, test ESMF 6.3.0r library is not ready.
#------------------------------------------------

if [ 2 = 1 ]; then


if [ ${SKIP_ESMF630rAPI:-NO} = YES ] ; then
 echo "Skipping NMMB and GFS tests using ESMF 6.3.0r API"
else
 #########################################################################
 # Clean and compile both NMMB & GFS cores, using ESMF 6.3.0r API.
 #########################################################################

# Since the ESMF 6.3.0r already tested on the wcoss machine, this part only testing
# on the zeus machine.

 if [ $COMPILE_SORC_630rAPI = YES ] ; then
  if [ $MACHINE_ID = gaea -o $MACHINE_ID = zeus ]; then

    ./esmf_version 6.3.0rAPI_zeus          >> ${COMPILE_LOG} 2>&1
    source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
    module list                            >> ${COMPILE_LOG} 2>&1
    gmake clean                            >> ${COMPILE_LOG} 2>&1
    gmake nmm_gsm                          >> ${COMPILE_LOG} 2>&1

   fi
  fi # endif compilation
  date                                     >> ${REGRESSIONTEST_LOG}

  cd $PATHRT

 ###############################################################################
 #
 # TEST   - GFS
 #        - 30 compute tasks / 1 thread
 #
 ###############################################################################

 if [ $MACHINE_ID = zeus ] ; then
  if [ $RT_FULL = true -o $CB_arg = gfs -o $CB_arg = all ] ; then

   export TEST_DESCR="Compare GFS results with previous trunk version ESMF6.3.0rAPI"

#---------------------
   (( TEST_NR=TEST_NR+1 ))
   export RUNDIR=${RUNDIR_ROOT}/GFS_32_ESMF_6.3.0rAPI
   export CNTL_DIR=GFS_NODFI_ESMF_6.3.0rAPI
   export LIST_FILES=" \
        sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
   export_gsm
#---------------------
   ./rt_gfs.sh
   if [ $? = 2 ]; then exit ; fi
#---------------------

  fi # endif test

 fi # endif machine (only zeus)

 fi # SKIP_ESMF630rAPI
fi # skip this test, for [ 2 = 1].

if [ ${SKIP_SINGLECORE:-NO} = YES ] ; then
 echo "Skipping single core NMMB and GFS tests"
else

# Since nmm and gsm are already compiled separately and tested 
# before on wcoss and gsm tested before on zeus, only test nmm on zeus.
#----------------------------------------------------------------------
if [ $MACHINE_ID = zeus ] ; then

#########################################################################
# Clean and compile only NMMB core
#########################################################################

if [ $RT_FULL = true ] ; then

 echo "Preparing model code for regression tests"
 echo "Compilation only NMM"
 printf %s "Compiling model code (this will take some time)......."
 cd ${PATHTR}/src

 date                                    >> ${REGRESSIONTEST_LOG}
 echo "Compilation only NMM"             >> ${REGRESSIONTEST_LOG}
 rm -f ${PATHTR}/exe/NEMS.x

 if [ $MACHINE_ID = gaea -o $MACHINE_ID = zeus ]; then

  ./esmf_version 3_zeus                  >> ${COMPILE_LOG} 2>&1
  source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
  module list                            >> ${COMPILE_LOG} 2>&1
  gmake clean                            >> ${COMPILE_LOG} 2>&1
  gmake nmm                              >> ${COMPILE_LOG} 2>&1

 fi

 if [ -f ${PATHTR}/exe/NEMS.x ] ; then
  echo "   Model code Compiled";echo;echo
 else
  echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
  echo "   Model code is NOT compiled"
  exit
 fi

fi # endif compilation

cd $PATHRT

###############################################################################
#
# TEST   - Global NMM-B with pure binary input
#        - 6x5 compute  tasks / 1 thread / opnl physics / free fcst / pure binary input
#
###############################################################################

if [ $RT_FULL = true ] ; then

 export TEST_DESCR="Compare NMMB-global results with previous trunk version, only NMM compiled"

#---------------------
 (( TEST_NR=TEST_NR+1 ))
 export RUNDIR=${RUNDIR_ROOT}/NMM_CNTRL_NMM_only
 export CNTL_DIR=NMMB_glob
 export LIST_FILES=" \
 nmmb_hst_01_bin_0000h_00m_00.00s nmmb_hst_01_bin_0024h_00m_00.00s \
 nmmb_hst_01_nio_0000h_00m_00.00s nmmb_hst_01_nio_0024h_00m_00.00s \
 nmmb_rst_01_bin_0024h_00m_00.00s nmmb_rst_01_nio_0024h_00m_00.00s "
#---------------------
 export_nmm
 export GBRG=glob ; export FCSTL=24
#---------------------
  ./rt_nmm.sh
  if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test

fi # only on zeus.

#########################################################################
# Clean and compile only GFS core
#########################################################################
# gsm already tested, skip.
# -------------------------
if [ 2 = 1 ]; then

if [ $RT_FULL = true ] ; then

 echo "Preparing model code for regression tests"
 echo "Compilation only GFS"
 printf %s "Compiling model code (this will take some time)......."
 cd ${PATHTR}/src

 date                                    >> ${REGRESSIONTEST_LOG}
 echo "Compilation only GFS"             >> ${REGRESSIONTEST_LOG}
 rm -f ${PATHTR}/exe/NEMS.x
 if [ $MACHINE_ID = gaea -o $MACHINE_ID = zeus ]; then

  ./esmf_version 3_zeus                  >> ${COMPILE_LOG} 2>&1
  source ./conf/modules.nems.Zeus        >> ${COMPILE_LOG} 2>&1
  module list                            >> ${COMPILE_LOG} 2>&1
  gmake clean                            >> ${COMPILE_LOG} 2>&1
  gmake gsm                              >> ${COMPILE_LOG} 2>&1

 fi

 date                                    >> ${REGRESSIONTEST_LOG}

 if [ -f ${PATHTR}/exe/NEMS.x ] ; then
  echo "   Model code Compiled";echo;echo
 else
  echo "   Model code is NOT compiled" >> ${REGRESSIONTEST_LOG}
  echo "   Model code is NOT compiled"
  exit
 fi

fi # endif compilation

cd $PATHRT


###############################################################################
#
# TEST   - GFS
#        - 30 compute tasks / 1 thread
#
###############################################################################

if [ ${RT_FULL} = true ]; then

 export TEST_DESCR="Compare GFS results with previous trunk version, only GFS compiled"

#---------------------
 (( TEST_NR=TEST_NR+1 ))
 export RUNDIR=${RUNDIR_ROOT}/GFS_32_GFS_only
 export CNTL_DIR=GFS_NODFI
 export LIST_FILES=" \
        sigf00 sigf03 sigf06 sigf12 sigf24 sigf48 \
        sfcf00 sfcf03 sfcf06 sfcf12 sfcf24 sfcf48 \
        flxf00 flxf03 flxf06 flxf12 flxf24 flxf48"
#---------------------
 export_gsm
#---------------------
  ./rt_gfs.sh
  if [ $? = 2 ]; then exit ; fi
#---------------------

fi # endif test

fi  # for 2 = 1.

fi # SKIP_SINGLECORE tests

################################################################################
# Finalize
################################################################################

rm -f err out configure_file* nmm_ll nmm_msub nmm_run gfs_fcst_run gfs_ll gen_fcst_run gen_ll fim_fcst_run fim_ll

if [ ${CLEAN_SORC:-YES} = YES ] ; then
  cd ${PATHTR}/src
  gmake clean            > /dev/null 2>&1
  ./esmf_version 3       > /dev/null 2>&1
  rm -f ../exe/NEMS.x*   > /dev/null 2>&1
fi

if [ ${CLEAN_RUNDIR:-YES} = YES ] ; then
  rm -rf ${RUNDIR_ROOT}
fi

date >> ${REGRESSIONTEST_LOG}

if [ $MACHINE_ID = zeus -o $MACHINE_ID = wcoss ]; then
  echo REGRESSION TEST WAS SUCCESSFUL
  echo REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
else
  banner REGRESSION TEST WAS SUCCESSFUL
  banner REGRESSION TEST WAS SUCCESSFUL >> ${REGRESSIONTEST_LOG}
fi


exit
