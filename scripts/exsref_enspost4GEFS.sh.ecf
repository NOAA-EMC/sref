#!/bin/ksh
#
#####################################################
# This program uses ensemble product generator to produce
# ensemble products (mean, spread and probability etc.) of 
# selected variables and write them out in grib format
# particularly for GEFS. 
#
# programmer: Jun Du
# 05/28/2012: Jun Du, initial program
# 05/20/2014: J. McQueen and Jun Du, Generalized for varying ENDHOUR
# 04/01/2015: Jun Du, expanded to match SREF.v7.0.0 members
#
#####################################################
set -x
echo ENSPOST4GEFS `pwd`

freq=$1
#freq=3hrly
#freq=1hrly

CNVGRIB=${CNVGRIB:-${CNVGRIB}}

######################################
# Part I: Fetching SREF data from /com 
######################################
# clean directory before job starts
rm -f r_gribawips.ctl*
rm -f r_gribawips.p01*
rm -f r_gribawips.p02*
rm -f r_gribawips.p03*
rm -f r_gribawips.p04*
rm -f r_gribawips.p05*
rm -f r_gribawips.p06*
rm -f r_gribawips.p07*
rm -f r_gribawips.p08*
rm -f r_gribawips.p09*
rm -f r_gribawips.p10*
rm -f r_gribawips.p11*
rm -f r_gribawips.p12*
rm -f r_gribawips.n01*
rm -f r_gribawips.n02*
rm -f r_gribawips.n03*
rm -f r_gribawips.n04*
rm -f r_gribawips.n05*
rm -f r_gribawips.n06*
rm -f r_gribawips.n07*
rm -f r_gribawips.n08*
rm -f r_gribawips.n09*
rm -f r_gribawips.n10*
rm -f r_gribawips.n11*
rm -f r_gribawips.n12*
rm -f *

export XLFRTEOPTS="namelist=old"

## setup.sh  # no need, since using module load prod_util 

typeset -Z2 gefscyc
typeset -Z3 ihr
grid=$2
#grid=212
TOTMBR=26
KM=39             #vertical pressure levels in input grib files (not really matters?)
yy=`echo $PDY | cut -c 1-4`
mm=`echo $PDY | cut -c 5-6`
dd=`echo $PDY | cut -c 7-8`
gefscyc=`expr $cyc - 3`
echo "sref cyc = ",$cyc
echo "gefs cyc = ",$gefscyc

system=$3

#if [ $freq = "3hrly" ]; then
# ENDHOUR=192
# INCHOUR=3
#fi

if [ $freq = "3hrly" ]; then
  ihr=000  #jtm reset to hr 00 since post script run for all forecast hours
  interval=$INCHOUR
  fhrs=;
  while [ $ihr -le $ENDHOUR ];do
    fhrs="$fhrs$ihr"
    ((ihr=ihr+interval))
    if [ $ihr -lt 10 ];then ihr="0"$ihr;fi
  done
fi

# calculation based on the following order
# nmb_ctl: p01 
# nmb_n1:  n01
# nmb_p1:  p02
# nmb_n2:  n02
# nmb_p2:  p03
# nmb_n3:  n03  
# nmb_p3:  p04
# nmm_n4:  n04
# nmm_p4:  p05
# nmm_n5:  n05
# nmm_p5:  p06
# nmm_n6:  n06
# nmm_p6:  p07

# em_ctl:  n07
# em_n1:   p08
# em_p1:   n08
# em_n2:   p09
# em_p2:   n09
# em_n3:   n10
# em_p3:   p10
# em_n4:   n11
# em_p4:   p11
# em_n5:   n12
# em_p5:   p12
# em_n6:   n13
# em_p6:   ctl

typeset -Z2 ipair
let imp=1;let ipair=01;let isrf=0
set -A MPTYP ctl n1 p1 n2 p2 n3 p3 n4 p4 n5 p5 n6 p6

MODEL[0]=
MODEL_PAIR[0]=
PAIR[0]=

while [ $imp -le 26 ];do

# SET SREF MODEL TYPE
  case $imp in
   [1-9] | 1[0-3] ) MODEL[imp]=sref_nmb;;
   1[4-9] |2[0-6] ) MODEL[imp]=sref_arw;;
  esac

# Set SREF ENSEMBLE PAIR
  if [ $isrf  -gt 12 ];then isrf=0;fi
  MODEL_PAIR[imp]=${MPTYP[isrf]}
  ((isrf=isrf+1))

# Set GENS ENSEMBLE PAIR
  PAIR[imp]="p"${ipair}    
  if [ `expr $imp % 2` -eq 0 ];then
    PAIR[imp]="n"${ipair}
    ((ipair=ipair+1))
  fi
  if [ $imp -eq 26 ];then PAIR[imp]=ctl;fi

  echo "GEFS member $imp   SREF MODEL TYPE  ${MODEL[imp]}   GENS PAIR ${PAIR[imp]}   SREF PAIR ${MODEL_PAIR[imp]}"
  ((imp=imp+1))
done

MODEL[27]=
MODEL_PAIR[27]=
PAIR[27]=
#--------------------

HR=00

NENS=0                               #total number of available members counted
nf=1
while [ $nf -le $TOTMBR ];do         #loop for all members
   HR=00
   hasfile="yes"
   export interval=$INCHOUR
   while [ $HR -le $ENDHOUR ];do
    waittime=0
    cklast="no"
    while [ $cklast = "no" ] && [ $hasfile = "yes" ] ;do
#    If a fcst file at any single fcst time is missing, this member won't be counted

     if [ -s ${COMIN}/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR ];then
#      Get file size in block (around 380 bytes)
       str=`ls -s $COMIN/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR`  
       set -A fsize $str

       if [ ${fsize[0]} -gt 100 ];then 
         echo  ${COMIN}/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR  EXISTS 
         cklast="yes"
       else
         sync
         if [ $waittime -gt 10 ] ; then                                       
           echo ${COMIN}/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR \ 
           " is temporarily missing and will check one more time later! "
         else  #jtm
           echo "waiting " ${COMIN}/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR .....
           echo " WAIT TIME " $waittime
           sleep 60
         fi
       fi
      fi  #jtm  Make sure file is available before doing an ls
#      sleep 60
      waittime=`expr $waittime + 1`
    done
#   GENS pgrb file interval change after 126 hours     jtm
    if [ $HR -lt 126 ];then 
      interval=03 
    else 
      interval=06
    fi
    HR=`expr $HR + $interval`
    if [ $HR -lt 10 ];then HR="0"$HR;fi
   done

#========================================================= 
# Further check each fcst time files
#========================================================= 
  HR=00
  export interval=$INCHOUR
  while [ $HR -le $ENDHOUR ] && [ $hasfile = "yes" ]; do
    ckall="no"
    icnt=1
    dump=-99
    while [ $icnt -lt 120 ];do
      if [ -s $COMIN/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR ];then
#       Get file size in block (1024 bytes)
        str=`ls -s $COMIN/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR` 
        set -A fsize $str
        if [ ${fsize[0]} -gt 100 ] ; then
          dump=0
          break
        else
          sync
          sleep 5
          echo  $icnt WAITING for $COMIN ${MODEl[nf]} $gefscyc ${MODEL_PAIR[nf]} FILE
        fi
       fi
       sync
       sleep 5
       icnt=$((icnt + 1))
     done
     if [ $dump -ne 0 ];then
       echo $COMIN/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR DOES NOTE EXIST
       hasfile="no"
       msg="ABORTING after 10 minutes of waiting for" \ 
    " $COMIN/${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]}.f$HR"
       err_exit $msg
     fi
#   GENS pgrb file interval change after 126 hours ????
    if [ $HR -lt 126 ];then 
      interval=03 
    else 
      interval=06
    fi
     HR=`expr $HR + $interval`
     if [ $HR -lt 10 ];then HR="0"$HR;fi
  done
   echo ALL ${MODEL[$nf]} ${MODEL_PAIR[$nf]} " FILES FOUND"  

#========================================================= 
#   Link input GEFS sref look-alike pgrb files
#========================================================= 
    HR=00 
    let timestep=0
  if [ $hasfile = "yes" ] ; then
    interval=03 
    while [ $HR -le $ENDHOUR ];do
      ((timestep=timestep+1))
      srefmem=${MODEL[nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[nf]}
      ln -s ${COMIN}/${srefmem}.f${HR}  r_gribawips.${PAIR[nf]}.f$HR

#       Create 3 hr avg model pair file after 126 hrs
#       using T-3 and T+3 pgrb file 
      if [ $HR -gt 126 ];then 
        int126=6
        if [ `expr $HR % $int126` -ne 0 -a $HR -lt $ENDHOUR ];then
          ((HLST=HR-interval))
          ((HNXT=HR+interval))
          echo "$nf Create intermediate SREF gens member file for hr $HR" \
               " Using ${MODEL[nf]} ${MODEL_PAIR[nf]} fhrs $HLST -> $HNXT"
          echo FILE $srefmem

          cat ${COMIN}/${srefmem}.f${HLST} ${COMIN}/${srefmem}.f${HNXT} > INGRIB
          $CNVGRIB -g12 -p40 INGRIB INGRIB2
          $WGRIB2 INGRIB2 | sort -t: -k4,4 -k5,5 -k6,6 -k3,3 | \
            $WGRIB2 -i INGRIB2 -set_grib_type c3 -fcst_ave 6hr \
            r_gribawips.${PAIR[nf]}.f${HR}.grb2
          $CNVGRIB -g21 r_gribawips.${PAIR[nf]}.f${HR}.grb2 \
            r_gribawips.${PAIR[nf]}.f${HR}
# Write out the intermediate files created
          cp r_gribawips.${PAIR[nf]}.f${HR} $COMIN/${srefmem}.f${HR}
        else
# Extract 6hrly apcp from 132, 138, ..., 192hr and add it to files 3hr earlier
#        infile=r_gribawips.${PAIR[nf]}.f$HR
         infile=${COMIN}/${srefmem}.f${HR}
$WGRIB $infile | grep ":APCP:kpds5=61:kpds6=1:kpds7=0:"     | $WGRIB -i -grib $infile -o 6hapcp.f$HR
         HRm3=`expr $HR - $interval`
         cat 6hapcp.f$HR >> r_gribawips.${PAIR[nf]}.f$HRm3
         cat 6hapcp.f$HR >> ${COMIN}/${srefmem}.f${HRm3}
         cp 6hapcp.f$HR $COMIN/${srefmem}_6hapcp.f${HRm3}
        fi
      fi

      HR=`expr $HR + $interval`
      if [ $HR -lt 10 ];then HR="0"$HR;fi
    done
    member[nf]=1
    NENS=`expr $NENS + 1`
  else
    member[nf]=0
  fi

  nf=`expr $nf + 1`

done

# Set back to 3 hrly interval as average GEFS SREF look alike files
# were created above
interval=03

#========================================================================
#  sref_ens_gen program: PRODUCT GENERATION
#========================================================================
echo $NENS $grid $KM $timestep $interval -1 > filename
echo $fhrs >> filename

nf=1
while [ $nf -le $TOTMBR ];do
 if [ ${member[$nf]} -eq 1 ]; then
   echo r_gribawips.${PAIR[$nf]} "  "  ${MODEL[$nf]}  "   -> " ${MODEL[$nf]}.t${gefscyc}z.pgrb${grid}.${MODEL_PAIR[$nf]} >> filename
 fi
 nf=`expr $nf + 1`
done

cat <<paramEOF >input
 &namin
  iyr=${yy},imon=${mm},idy=${dd},ihr=${gefscyc},ihh1=1,ihh2=${timestep},sys=$system
 &end
paramEOF

###############################################
# Part III: decode, calculate and write to grib
###############################################
export pgm=sref_com_grib_gefs.$grid
#. prep_step

#startmsg
echo RUN SREF_ENS_GEN `pwd`
echo timestep $timestep ENDHOUR $ENDHOUR freq $freq  GEFSCYC $gefscyc GRID $grid
rm -f variable.tbl
cp $PARMsref/sref_product_variable.tbl_gefs variable.tbl
$EXECsref/sref_ens_gen < input >> $pgmout 2>errfile
export err=$?;# err_chk

HR=00
while [ $HR -le $ENDHOUR ];do
  mv mean.sref.f$HR   $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.f$HR
  mv spread.sref.f$HR $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.f$HR
  mv prob.sref.f$HR   $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.f$HR
  mv max.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.f$HR
  mv min.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.f$HR
  mv mod.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.f$HR
  mv p10.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.f$HR
  mv p25.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.f$HR
  mv p50.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.f$HR
  mv p75.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.f$HR
  mv p90.sref.f$HR    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.f$HR

  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.f$HR   >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.f$HR >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.f$HR   >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq
  cat $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.f$HR    >> $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq

  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.f$HR
  rm -f $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.f$HR
  HR=`expr $HR + $interval`
  if [ $HR -lt 10 ];then HR="0"$HR;fi
done

############################
# Convert to grib2 format
############################
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq   $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq   $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.grib2
$CNVGRIB -g12 -p40 -nv $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq    $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.grib2
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.grib2 -s >       $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.grib2 -s >     $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.grib2 -s >       $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.grib2.idx
$WGRIB2 $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.grib2 -s >        $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.grib2.idx

echo "This product will not be sent outside of the CCS"
# Send alerts
#if test "$SENDDBN" = "YES"
#then
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq
#fi
#
#if [ $SENDDBN_GB2 = YES ]
#then
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prob_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.grib2
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2 $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.grib2
#
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mean_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.spread_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.prod_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.max_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.min_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.mod_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p10_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p25_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p50_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p75_$freq.grib2.idx
# $DBNROOT/bin/dbn_alert MODEL SREF_GEFS_PGB_GB2_WIDX  $job $COMOUT/sref.t${gefscyc}z.pgrb${grid}.p90_$freq.grib2.idx
#fi

